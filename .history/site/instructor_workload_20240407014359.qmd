---
title: "Instructor Workload"
---

```{ojs}

// Importing D3.js
d3 = require('d3@6')
```

```{ojs}
// Attach the CSV file
fileAttachment = FileAttachment("stacked_df.csv")
```

```{ojs}
// Load the CSV data
data = await fileAttachment.csv()
```


```{ojs}
// Filter and transform data
transformedData = data.map(d => ({
  instructor: d.instructor,
  total_hours: +d.sum_term + +d.sum_term_crse + +d.sum_term_crse_crn + +d.sum_term_crse_crn_mtg_students + +d.sum_term_crse_crn_hours,
  lec_hours: d.wrkld_sample_type === 'LEC' ? +d.sum_term_crse_crn_hours : 0,
  total_workload: +d.sum_term_crse_wrkld_sample,
  lec_workload: d.wrkld_sample_type === 'LEC' ? +d.sum_term_crse_wrkld_sample_lec : 0,
  dept: d.ins_dept,
  role: d.ins_role,
  course: d.COURSE
}));
```

```{ojs}
// aggregate data
aggregatedData = d3.rollups(transformedData, v => ({
  total_hours: d3.sum(v, d => d.total_hours),
  lec_hours: d3.sum(v, d => d.lec_hours),
  total_workload: d3.sum(v, d => d.total_workload),
  courses: Array.from(new Set(v.map(d => d.course))),
  lec_workload: d3.sum(v, d => d.lec_workload),
  ins_dept: v[0].dept,
  ins_role: v[0].role
}), d => d.instructor).map(([instructor, values]) => ({ instructor, ...values}));
```

```{ojs}

margin = ({top: 20, right: 20, bottom: 20, left: 40 })
```

```{ojs}
height = 1700 - margin.top - margin.bottom
```

```{ojs}
width = 850 + margin.left - margin.right
```

```{ojs}