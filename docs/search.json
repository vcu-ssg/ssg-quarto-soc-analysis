[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Analysis of Teaching",
    "section": "",
    "text": "This web report presents an application of a sample model of faculty workload over the past two semesters (Spring 2023 and Fall 2023).\nThis is intended to be a living analysis. As additions and corrections are found please let me know and we can implement the necessary changes and re-render the report.\nThis report was developed using Quarto, an open-source scientific and technical publishing designed with reproducibility in mind. Analyses were performed using python. The source code for the pages on this site are available in a github repository."
  },
  {
    "objectID": "index.html#report-organization",
    "href": "index.html#report-organization",
    "title": "Analysis of Teaching",
    "section": "Report organization",
    "text": "Report organization\nThe site is organized as follow:\n\nDownload - this section describes the source of data (VCU reports) and shows the files and semesters downloaded. This section is provided so that others can obtain the same data used for this report.\nClean - this section documents the cleaning strategies applied to the data obtained above. This section refactors and reshapes the data, adds new columns and corrects known errors. The data are stored in this repo, and are also uploaded to this google sheet.\nExplore - this section offers several sample analysis using the cleaned data. This report is generated using python and matplotlib. The examples are offered as demonstrations of the possible, not as part of a real analysis of workload."
  },
  {
    "objectID": "index.html#rolling-your-own-model",
    "href": "index.html#rolling-your-own-model",
    "title": "Analysis of Teaching",
    "section": "Rolling your own model",
    "text": "Rolling your own model\nThe resulting dataframe is available here for download as CSV.\nThe result dataframe is also uploaded to a google workbook and a sample analysis is conducted."
  },
  {
    "objectID": "index.html#persistent-data",
    "href": "index.html#persistent-data",
    "title": "Analysis of Teaching",
    "section": "Persistent data",
    "text": "Persistent data\nThe banner report used to create this report does not contain all the necessary data to complete the analysis (e.g., instructor department).\nPersistent data are stored in a google sheet.\nInstructor data - these data provide instructor departments and instructor roles, and an instructor workload designation. This table is necessary for the analysis.\nInstructor notes - these data offer additional details about instructors. It is expected that these data might be incorporated into a subsequent workload report. This table is optional to this analysis.\nCourse notes - these data offer additional details about the courses. This table is optional to this analysis."
  },
  {
    "objectID": "40_workload.html",
    "href": "40_workload.html",
    "title": "Workloads",
    "section": "",
    "text": "These are experimental presentations of the data."
  },
  {
    "objectID": "40_workload.html#explore-tabular-data",
    "href": "40_workload.html#explore-tabular-data",
    "title": "Workloads",
    "section": "Explore tabular data",
    "text": "Explore tabular data\n\ncols = ['instructor','ins_dept','TERM','COURSE','TITLE','wrkld_sample_type','sum_term_crse_wrkld_sample','wrkld_sample_note']\nterms = [202410,202320]\n\ndf = stacked_df[stacked_df[\"TERM\"].isin(terms)][cols]\n\nbokeh_formatters = {\n    'TERM': NumberFormatter(format='000000')\n}\n\ntable = pn.widgets.Tabulator(df,\n    show_index=False,\n    formatters=bokeh_formatters\n)\n\ntable"
  },
  {
    "objectID": "20_clean.html",
    "href": "20_clean.html",
    "title": "Cleaning the data",
    "section": "",
    "text": "This script describes the data and walks through a process of data cleaning.\nAt completion of this script all the individual semester data files will be combined into a single dataframe for analysis, and the dataframe will be refactored for cleaner analysis.\nTLDR: Here is a link to the cleaned dataframe. This dataframe contains one tuple per (TERM,CRN,INSTRUCTOR,MEETING_CODE).\nTLDR: Here is a link to the google sheet with the cleaned data loaded in the “source data” tab and other sheets referencing the source data."
  },
  {
    "objectID": "20_clean.html#data-sources",
    "href": "20_clean.html#data-sources",
    "title": "Cleaning the data",
    "section": "Data sources",
    "text": "Data sources\nThe files are named appropriately and stored in the data folder in this repository."
  },
  {
    "objectID": "20_clean.html#data-cleaning",
    "href": "20_clean.html#data-cleaning",
    "title": "Cleaning the data",
    "section": "Data Cleaning",
    "text": "Data Cleaning\nThe following sections combine the individual sources of data and clean them up.\n\nCombining to single data frame\nThe following section combines each XLSX into a single data frame. The contents of the files are variable in length depending on the number of sections taught during any given semester.\nThe appropriate block starts one row after the row with the keyword TERM in the first column, denoting the header row. The appropriate block ends with the row prior to the row with the keyword N =.\nWe’re assuming that all xlsx workbooks share the same columns and names.\n\n# Initialize an empty list to store trimmed DataFrames\ntrimmed_dfs = []\n\n# Iterate through the list of XLSX file names\nfor file_name in xlsx_df['file_name']:\n    # Load the XLSX file into a DataFrame\n    full_path = os.path.join(directory_path, file_name)\n    df = pd.read_excel(full_path)\n    \n    # Find the row index where \"TERM\" is in the first column\n    term_index = df.index[df.iloc[:, 0] == \"TERM\"].tolist()[0]\n    \n    # Find the row index where \"N=\" is in the first column\n    n_index = df.index[df.iloc[:, 0].str.startswith(\"N =\").fillna(False)].tolist()[0]\n\n    # Clip the desired block and add column names\n    trimmed_df = df.loc[term_index + 1 : n_index - 1]\n    trimmed_df.columns = df.iloc[term_index].values\n\n    # Append the trimmed DataFrame to the list\n    trimmed_dfs.append(trimmed_df)\n\n# Combine the individual dataframes into one big one.\nsections_df = pd.concat(trimmed_dfs, ignore_index=True)\n\n\n\nMerge in the term and period data from the xlsx_df dataframe\nThe following code merges in the term and period data with the section data. First ensure that the key columns are strings, then merge away.\n\nsections_df['SECT'] = sections_df['SECT'].astype(str)\nsections_df['TERM'] = sections_df['TERM'].astype(str)\nxlsx_df['term_code'] = xlsx_df['term_code'].astype(str)\nsections_df = pd.merge(sections_df,xlsx_df,left_on='TERM', right_on='term_code', how='left')\n\n\n\nFix known errors\nThe data in Banner doesn’t always reflect reality. This step corrects known errors in the data.\nNote that the section data are stored one row per term-crn-meeting period.\nThe purpose of this section is to demonstrate an auditable process for documenting changes to the source data.\nThere is nothing magic about the changes below. As I shared the data with others, they found that the banner data did not reflect reality. For this workload analysis we want the data to reflect reality, so we fix it.\nAdditional fixes are expected to be added as new eyes look at their data.\n\n# Spring 2023: CMSC475 John Leonard taught for David Shepherd\nfix(1,'Swap Leonard for Shepherd',{'TERM':'202320','CRN':'43471'},{'PRIMARY INSTRUCTOR FIRST NAME':'John','PRIMARY INSTRUCTOR LAST NAME':'Leonard'})\n\n# Fall 2024: CMSC391 is cross listed with COAR463.\n# Total enrollment 34 across two instructors (Bennett and Leonard)\n# Currently Banner shows only 20 in the JL section and doesn't mention the COAR section.\nfix(2,'Fix incorrect cross listing',{'TERM':'202410','CRN':'46263'},{'ACTUAL ENROLLMENT':34})\n\nfix(3,\"Remove Duke as 2nd instructor\",{'TERM':'202410','CRN':'40553'},{'SECONDARY INSTRUCTOR FIRST NAME':'','SECONDARY INSTRUCTOR LAST NAME':''})\nfix(4,\"Remove Duke as 2nd instructor\",{'TERM':'202410','CRN':'40554'},{'SECONDARY INSTRUCTOR FIRST NAME':'','SECONDARY INSTRUCTOR LAST NAME':''})\nfix(5,\"Remove Duke as 2nd instructor\",{'TERM':'202410','CRN':'40555'},{'SECONDARY INSTRUCTOR FIRST NAME':'','SECONDARY INSTRUCTOR LAST NAME':''})\n\nfix(6,\"Remove Sparks as 2nd instructor\",{'TERM':'202320','CRN':'17442'},{'SECONDARY INSTRUCTOR FIRST NAME':'','SECONDARY INSTRUCTOR LAST NAME':''})\nfix(7,\"Remove Duke as 2nd instructor\",{'TERM':'202320','CRN':'33698'},{'SECONDARY INSTRUCTOR FIRST NAME':'','SECONDARY INSTRUCTOR LAST NAME':''})\nfix(8,\"Remove Duke as 2nd instructor\",{'TERM':'202320','CRN':'41891'},{'SECONDARY INSTRUCTOR FIRST NAME':'','SECONDARY INSTRUCTOR LAST NAME':''})\nfix(9,\"Capstone common course is LEC not SEM\",{'TERM':'202320','CRN':'45290'},{'TYPE':'LEC'})\n\n\n\nReshape the data\nThe current dataframe sections_df contains one record per term-crn-meeting period tuple. Within each tuple there can be up to 2 instructors. We need to reshape the data with the instructors in a single column.\nWhile we’re here we can combine instructor first and last name, and drop verbose columns.\n\ncols = sections_df.columns\nvalues_to_remove = ['PRIMARY INSTRUCTOR FIRST NAME','PRIMARY INSTRUCTOR LAST NAME','SECONDARY INSTRUCTOR FIRST NAME','SECONDARY INSTRUCTOR LAST NAME']\ncols = [x for x in cols if x not in values_to_remove]\n\nsections_df['ins1_last'] = sections_df['PRIMARY INSTRUCTOR LAST NAME']\nsections_df['ins1_first'] = sections_df['PRIMARY INSTRUCTOR FIRST NAME']\nsections_df['ins2_last'] = sections_df['SECONDARY INSTRUCTOR LAST NAME']\nsections_df['ins2_first'] = sections_df['SECONDARY INSTRUCTOR FIRST NAME']\nsections_df['instructor_1'] = sections_df['ins1_last']+sections_df['ins1_first'].apply(lambda x: ',' if x != \"\" else \"\")+sections_df['ins1_first']\nsections_df['instructor_2'] = sections_df['ins2_last']+sections_df['ins2_first'].apply(lambda x: ',' if x != \"\" else \"\")+sections_df['ins2_first']\nsections_df['instructor_1'].fillna('',inplace=True)\nsections_df['instructor_2'].fillna('',inplace=True)\n\nstacked_df = pd.melt(sections_df,\n    id_vars=cols,\n    value_vars=['instructor_1','instructor_2'],\n    var_name='instructor source',\n    value_name='instructor'\n)\n\n\n\nClean up rows\nThe process above introduces records with missing instructor_2. This code removes records missing instructor_2.\n\n# remove rows with empty instructor 1.  Keep rows with empty instructor 1.\nstacked_df = stacked_df[ ~ ((stacked_df['instructor source']=='instructor_2') & (stacked_df['instructor']=='')) ]\n\nIn some summer courses an instructor was not listed in the data. An instructor name is generated using the course and semester. This can be cleaned later.\n\n# replace any missing instructors with note\nstacked_df.loc[stacked_df[\"instructor\"].isin(['']),\"instructor\"] = stacked_df[stacked_df[\"instructor\"].isin([''])]['COURSE']+' '+stacked_df[stacked_df[\"instructor\"].isin([''])]['TERM']+' '+stacked_df[stacked_df[\"instructor\"].isin([''])]['CRN']\n\nSome sections, for example RES sections or cancelled sections have zero enrollments. These are removed, keeping only sections with positive enrollments.\n\n# drop rows with zero enrollments\nstacked_df = stacked_df[stacked_df['ACTUAL ENROLLMENT']&gt;0]\n\nWhile not necessary, the resulting dataframe can be sorted so that it looks pretty when saved to a CSV.\n\n# Sort the data frame so it looks pretty in the output file.\nstacked_df = stacked_df.sort_values(['TERM','DEPT','COURSE','SECT','instructor source','instructor'])\n\n\n\nAdd additional data columns\nWe may need the subject and the course number in the workload model analysis.\n\nstacked_df[\"course_subject\"] = stacked_df[\"COURSE\"].str[:4]\nstacked_df[\"course_number\"] = stacked_df[\"COURSE\"].str[4:]\n\nFor each section, add a new field with the count of instructors sharing this section. This helps with workload and other computations later.\n\n# Number of instructors sharing a common CRN.\nstacked_df[\"instructor_cnt\"] = stacked_df.groupby(['TERM','COURSE','CRN'])['CRN'].transform('count') / stacked_df.groupby(['TERM','COURSE','CRN','instructor'])['instructor'].transform('count') \n\nstacked_df[\"capstone_cnt\"] = 0.0  # used downstream to provide an actual capstone count rather than an estimated count of capstone sections.\n\nIt’s getting old adding new columns, then having to rework the formuluas in the rather brittle google sheet. I’m adding a few spare columns here to be used as necessary. This is the best place to add the new columns, just prior to the calculation of the aggregate measures and workload attributes.\n\nstacked_df[\"spare_col_1\"] = 0\nstacked_df[\"spare_col_2\"] = 0\nstacked_df[\"spare_col_3\"] = 0\nstacked_df[\"spare_col_4\"] = 0\nstacked_df[\"spare_col_5\"] = 0\nstacked_df[\"spare_col_6\"] = 0\n\n\n\nMerge persistent instructor data\nThe Banner report that we’re using for this analysis does not include all the necessary data for a proper analysis. The report infers the offering department of the course (e.g., ENGR497 or CMSC475), but not the home department of the instructor. For example, capstone courses are coded ad ENGR497, but the record won’t include the home department of the instructor, making it difficult to roll up all the courses by home department of the instructor.\nWe store persistent instructor and course data in a separate google sheet. As these persistent data are changed or corrected, this analysis should be regenerated to use these amended data.\nThe code below merges the persistent instructor data from the google sheet into the working dataframe.\n\n# define scope\nscope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']\n\n# create credentials object\ncredential_file = os.path.join(os.path.expanduser(\"~\"), \".gsecrets\", \"gsheets-credentials.json\")\nif not os.path.isfile( credential_file ):\n  print(\"Missing credential file:\",credential_file)\n  sys.exit()\n\n# authorize the client\ncreds = ServiceAccountCredentials.from_json_keyfile_name(credential_file, scope)\nclient = gspread.authorize(creds)\n\nspreadsheet_key = \"1ZK7k8M85CXLof6FdeJYJuGFbfjsOXrCv5mc7OgUInWw\"\nworksheet_name = \"Instructor data\"\nsheet = client.open_by_key(spreadsheet_key).worksheet(worksheet_name)\ninstructor_df = get_as_dataframe(worksheet=sheet, evaluate_formulas=True )\n\nstacked_df = pd.merge( stacked_df,instructor_df,left_on='instructor',right_on='instructor',how='left')\n\nworksheet_name = \"Instructor notes\"\nsheet = client.open_by_key(spreadsheet_key).worksheet(worksheet_name)\ninstructor_notes_df = get_as_dataframe(worksheet=sheet, evaluate_formulas=True )\n\nstacked_df = pd.merge( stacked_df,instructor_notes_df,left_on='instructor',right_on='instructor',how='left')\n\n\n\nMerge persistent course data\nPersistent course data is also stored in the google sheet and merged with the working dataframe.\n\n# spreadsheet_key = \"1ZK7k8M85CXLof6FdeJYJuGFbfjsOXrCv5mc7OgUInWw\" from above!\nworksheet_name = \"Course notes\"\nsheet = client.open_by_key(spreadsheet_key).worksheet(worksheet_name)\ncourse_notes_df = get_as_dataframe(worksheet=sheet, evaluate_formulas=True )\n\nstacked_df = pd.merge( stacked_df,course_notes_df,left_on='COURSE',right_on='crse',how='left')\n\n\n\nIdentify shared rooms\nSome CRN share the same classroom and instructor. Examples might include an UG and GR section sharing the same lecture, or multiple LEC/LAB combos sharing the same LEC with different LAB rooms and time.\nTo properly identify shared lectures we need to identify unique combinations of days of week and rooms and assign store these values for later aggregation.\n\ntime_cols = ['MON-IND','TUE-IND','WED-IND','THU-IND','FRI-IND','SAT-IND','SUN-IND','BEGIN TIME','END TIME']\nroom_cols = ['BUILDING','ROOM']\n\nstacked_df[\"time_code\"] = \"\"\nfor col in time_cols:\n    stacked_df[col] = stacked_df[col].fillna('.')\n    stacked_df[\"time_code\"] = stacked_df[\"time_code\"] + stacked_df[col].astype(str)\nstacked_df['time_id'] = pd.factorize(stacked_df['time_code'])[0]\n\nstacked_df[\"room_code\"] = \"\"\nfor col in room_cols:\n    stacked_df[col] = stacked_df[col].fillna('.')\n    stacked_df[\"room_code\"] = stacked_df[\"room_code\"] + stacked_df[col].astype(str)\nstacked_df['room_id'] = pd.factorize(stacked_df['room_code'])[0]\n\nstacked_df[\"meeting_code\"] = stacked_df[\"room_code\"] + stacked_df[\"time_code\"]\nstacked_df['meeting_id'] = pd.factorize(stacked_df['meeting_code'])[0]\n\nday_cols = ['MON-IND','TUE-IND','WED-IND','THU-IND','FRI-IND','SAT-IND','SUN-IND']\nstacked_df[\"mtgs_per_wk\"] = 0\nfor col in day_cols:\n    stacked_df[col] = stacked_df[col].fillna('.')\n    stacked_df['mtgs_per_wk'] = stacked_df[\"mtgs_per_wk\"] + (stacked_df[col] != \".\").astype(int)\n\nstacked_df[\"BEGIN TIME\"] = stacked_df[\"BEGIN TIME\"].replace(\".\",\"0\")\nstacked_df[\"END TIME\"] = stacked_df[\"END TIME\"].replace(\".\",\"0\")\nstacked_df['mtg_length'] = stacked_df[\"END TIME\"].astype(int) - stacked_df[\"BEGIN TIME\"].astype(int)\n\nstacked_df['shared_mtgs_cnt'] =  stacked_df.groupby(['TERM','instructor','time_id'])['time_id'].transform('count')\nstacked_df.loc[(stacked_df['time_code'].isin(['.........'])),'shared_mtgs_cnt'] = 1\n\nstacked_df['mtgs_per_crn'] =  stacked_df.groupby(['TERM','CRN','instructor'])['CRN'].transform('count')\n\n\n\nFind all courses taught by same instructor at the same time\nThis code builds a list of separate courses taught by an instructor at the same time. This code is similar to the code above with the enhancement that it produces an explicit list of courses that share the same room and time.\n\ndef concat_courses(group):\n    return ','.join(group['COURSE'])\n\ntemp_df = pd.DataFrame();\nkeys = ['TERM','instructor','time_code']\ntemp_df[\"concat\"] = stacked_df.groupby(keys).apply(concat_courses)\ntemp_df[\"list\"] = temp_df[\"concat\"].apply( lambda x :  list(set(x.split(\",\"))) )\ntemp_df[\"combined_count\"] = temp_df[\"list\"].apply( lambda x :  len(x) )\ntemp_df[\"combined_sections\"] = temp_df[\"list\"].apply( lambda x :  \",\".join(x) )\ntemp_df = temp_df.reset_index()\ntemp_df = temp_df[ (temp_df['time_code']!='.........')&(temp_df['combined_count']&gt;1)]\ntemp_df = temp_df[['TERM','instructor','time_code','combined_count','combined_sections']]\nstacked_df = pd.merge(stacked_df,temp_df,left_on=keys, right_on=keys,how=\"left\")\n\n\n\nCGEP: convert to IND rather than LEC from workload perspective\nCardinal Education (formally known as the Commonwealth Graduate Engineering Program (CGEP)) is a collaborative effort among six participating universities and institutions throughout the Commonwealth of Virginia. It utilizes virtual learning classrooms and education technology in synchronous and asynchronous formats to provide working engineers the opportunity to earn a master’s degree in engineering from any of the six participating universities/institutions.\nCGEP courses hosted at VCU are coded as LEC in Banner and must be associated with a VCU instructor. This ensures that the student receives proper credit towards graduation. However, from a workload perspective, these courses do not require local instructor preparation or teaching effort.\nThis section recodes CGEP courses to independent study (IND).\n\n# Function to set the 'TYPE' column based on a string search in 'TITLE'\ndef set_type_based_on_search(row):\n    title = row['TITLE']\n    newtype = row['TYPE']\n    if 'CGEP' in title:\n        newtype = 'IND'\n    return newtype\n\n# Apply the function to the entire DataFrame\nstacked_df['TYPE'] = stacked_df.apply(set_type_based_on_search, axis=1)\n\nNote that additional spare columns are added to persistent instructor and course google sheets.\n\n\nCompute appropriate aggregate measures\nThese measures are used in later calculations for numbers of courses, sections, instructors, etc.\nThese computations are normalized to the appropriate group so that they sum to the correct values when aggregated at the specified group level.\n\n# Create various aggregate columns\nstacked_df['sum_term'] = 1.0 / stacked_df.groupby(['TERM'])['TERM'].transform('count')\nstacked_df['sum_term_crse'] = 1.0 / stacked_df.groupby(['TERM','COURSE'])['COURSE'].transform('count')\nstacked_df['sum_term_crse_crn'] = 1.0 / stacked_df.groupby(['TERM','COURSE','CRN','time_code'])['CRN'].transform('count') / stacked_df['mtgs_per_crn']\nstacked_df['sum_term_crse_crn_mtg_students'] = stacked_df['ACTUAL ENROLLMENT'] * stacked_df['sum_term_crse_crn'] * stacked_df['mtgs_per_crn']\nstacked_df['sum_term_crse_crn_hours'] =  stacked_df['sum_term_crse_crn_mtg_students'] * stacked_df['MAX CREDITS']  / stacked_df['mtgs_per_crn']\n\n\n\nPlaceholder Workload model assignments\nThese are placeholders for any proposed workload model based on course and instructor attributes.\nFor each workload model, there is a:\n\nsum_term_crse_wrkld containing the numeric assignment of workload for that entry in the dataframe.\nwrkld__type* containing the recoded course type. For example, some LEC sections that are actually labs are coded labs. Capstones are also highlighted.\nwrkld_note containing a note about the specific workload assignment.\n\n\nstacked_df['wrkld_sample_type'] = stacked_df['TYPE']\nstacked_df['sum_term_crse_wrkld_sample'] = 0.0\nstacked_df['wrkld_sample_note'] = \"\"\nstacked_df['wrkld_a_type'] = stacked_df['TYPE']\nstacked_df['sum_term_crse_wrkld_a'] = 0.0\nstacked_df['wrkld_a_note'] = \"\"\nstacked_df['wrkld_b_type'] = stacked_df['TYPE']\nstacked_df['sum_term_crse_wrkld_b'] = 0.0\nstacked_df['wrkld_b_note'] = \"\"\nstacked_df['wrkld_c_type'] = stacked_df['TYPE']\nstacked_df['sum_term_crse_wrkld_c'] = 0.0\nstacked_df['wrkld_c_note'] = \"\""
  },
  {
    "objectID": "20_clean.html#sample-workload-model",
    "href": "20_clean.html#sample-workload-model",
    "title": "Cleaning the data",
    "section": "Sample workload model",
    "text": "Sample workload model\nThis is the sample workload model. The assigned faculty workoad will be stored in the sum_term_crse_wrklod_sample field. Here is the model:\n\nmodel_sample = {\n    'base_lecture_value':1.0,\n    'labs_per_lecture':3.0,\n    'vips_per_lecture':3.0,\n    'capstones_per_lecture': 3.0,\n    'students_per_capstone': 4.0,\n    'seminars_per_lecture': 1.0,\n    'res_ind_fld_per_lecture': 0.0,\n    'large_classes': [ [80,1.5],[160,2.0],[240,2.5] ]\n}\n\n\nEach section/CRN is worth a full teaching credit.\nResearch, indepedent study and coop/intern sections receive zero teaching credit in this workload model. Instructors receive credit through their salary if they’re staff. Research active faculty get reduced teaching loads.\nLab sections including actual course labs, capstone/senior design, and VIP receive 1/3 credit. This is consistent with the model that 3 lab hours is equivalent to 1 teaching hour. (e.g., 3-3-4 courses.) NOTE that laboratory sections are NOT coded as separate labs, rather they are coded as LEC making it difficult to discern these. See EGRE306 for an example.\nSeminar sections get full section credit as a positive incentive. There is a limited number of SEM courses, they are important to the curriculum, and we want them covered.\nCapstone designs are scaled to give one LAB (0.33 per above) unit per groups of 4 students.\n\n\nAssign BASE workload to all sections\nAssign base workload to all records. All sections independent of section type start with a base workload of 1.\nAdjust base workload for courses shared by multiple instructors.\nIn some cases, a shared instructor was included in Banner so that the shared instructor could monitor the course in Canvas only, without offering additional teaching effort. In these cases, I recommend adding a “FIX” (listed above) to remove the secondary instructor from the workload data, ensuring that they don’t get credit for a class they aren’t actually co-teaching.\n\n# Assign standard workload : One teaching course shared across multiple instructors\nstacked_df[\"sum_term_crse_wrkld_sample\"] = model_sample['base_lecture_value']\n# Update note\nstacked_df.loc[(stacked_df['wrkld_sample_type']=='LEC'),'wrkld_sample_note'] = \"BASE: [wrkld] \"\n\n# Adjust for multiple instructors\nstacked_df[\"sum_term_crse_wrkld_sample\"] = stacked_df[\"sum_term_crse_wrkld_sample\"] / stacked_df[\"instructor_cnt\"]\n# Update note\nstacked_df.loc[(stacked_df['wrkld_sample_type']=='LEC')&(stacked_df['instructor_cnt']&gt;1.0),'wrkld_sample_note'] = \"BASE: [wrkld] / (2 co-teaching) \"\n\n\n\nAdjust for courses taught at same time by same instructor\n\n# adjust workload for CRN sharing same teaching time\nstacked_df.loc[(stacked_df['shared_mtgs_cnt']&gt;1),'sum_term_crse_wrkld_sample'] = stacked_df.loc[(stacked_df['shared_mtgs_cnt']&gt;1),'sum_term_crse_wrkld_sample'] / stacked_df.loc[(stacked_df['shared_mtgs_cnt']&gt;1),'shared_mtgs_cnt'] \n\n# Update note to reflect adjustment\nstacked_df.loc[(stacked_df['shared_mtgs_cnt']&gt;1),'wrkld_sample_note'] = (\n  stacked_df.loc[(stacked_df['shared_mtgs_cnt']&gt;1),'wrkld_sample_note'] + \"/ \" + \n  stacked_df.loc[(stacked_df['shared_mtgs_cnt']&gt;1),'shared_mtgs_cnt'].astype(str) +\" CRN at same time\"\n)\n\n\n\nAdjust for capstone workloads\nCapstone / senior design courses are coded differently in each department within the college. Further, some of these course numbers change over time (across semesters).\nA list of capstone courses was assembled manually and then applied to convert the capstone sections to CAP.\nThis code is applied in two steps with an opportunity to introduce adjustments to the estimate of capstones.\nIn this sample workload model, estimates of the number of capstones are rounded up (CEIL) to the next highest integer number of capstones.\n\n# Assign CAP workload\n\ncapstones_per_lecture = model_sample['capstones_per_lecture']\nstudents_per_capstone = model_sample['students_per_capstone']\n\nsenior_design_courses = ['CLSC403','EGRB401','EGRB402','CMSC441','CMSC442','CMSC451','CMSC452','EGMN402','EGMN403','ENGR402','ENGR403','EGRE404','EGRE405']\nfor course in senior_design_courses:\n    # Set section type\n    stacked_df.loc[(stacked_df['COURSE']==course)&(stacked_df['TYPE']=='LAB'),'wrkld_sample_type'] = 'CAP'\n    \n    # Estimate number of capstone sections using load of \"students_per_capstone\". Round up or down.\n    # This code was added after the initial code build, so we're storing the capstone_cnt in one of the spares we created above.\n    stacked_df.loc[(stacked_df['COURSE']==course)&(stacked_df['wrkld_sample_type']=='CAP'),'capstone_cnt'] = ( 1.0* stacked_df.loc[(stacked_df['COURSE']==course)&(stacked_df['wrkld_sample_type']=='CAP'),'ACTUAL ENROLLMENT'].astype(float) / students_per_capstone)\n\n    # apply CEIL function\n    stacked_df.loc[(stacked_df['COURSE']==course)&(stacked_df['wrkld_sample_type']=='CAP'),'capstone_cnt'] = stacked_df.loc[(stacked_df['COURSE']==course)&(stacked_df['wrkld_sample_type']=='CAP'),'capstone_cnt'].apply( np.ceil )\n\nNow, apply any necessary fixes.\n\n## apply any fixes to number of capstone sections. Use TERM,CRN as keys\n\nNow, actually compute the workload based on the capstone_cnt.\n\nfor course in senior_design_courses:\n    # Using the capstone count above, calculate the capstone workload\n    stacked_df.loc[(stacked_df['COURSE']==course)&(stacked_df['wrkld_sample_type']=='CAP'),'sum_term_crse_wrkld_sample'] = (\n     stacked_df.loc[(stacked_df['COURSE']==course)&(stacked_df['wrkld_sample_type']=='CAP'),'sum_term_crse_crn'] / capstones_per_lecture * ( stacked_df.loc[(stacked_df['COURSE']==course)&(stacked_df['wrkld_sample_type']=='CAP'),'capstone_cnt'] ) )\n\n    # Update note to show adjustments\n    stacked_df.loc[(stacked_df['COURSE']==course)&(stacked_df['wrkld_sample_type']=='CAP'),'wrkld_sample_note'] = (f\"RULE: [wrkld]={(1.0/capstones_per_lecture):0.2f} for every {students_per_capstone} students in CAP (CAP=\" +\n     stacked_df.loc[(stacked_df['COURSE']==course)&(stacked_df['wrkld_sample_type']=='CAP'),'capstone_cnt'].astype(str) + \")\")\n\n\n\nDistinguish VIP workloads\nVertically Integrated Programs (VIP) provide undergraduate students the opportunity to participate in course-based, multiyear, multidisciplinary, team-based projects under the guidance of faculty and graduate students. These projects are in the faculty areas of expertise, with the main criterion for participation being that of mutual interest.\nManaging a VIP requires effort on the part of the faculty, yet at a lower rate than a standard class.\n\n# Assign VIP workload\n\nvips_per_lecture = model_sample['vips_per_lecture']\n\nstacked_df.loc[stacked_df['course_number'].isin(['497']),'wrkld_sample_type'] = \"VIP\"\nstacked_df.loc[stacked_df['wrkld_sample_type'].isin(['VIP']),'wrkld_sample_note'] = f\"RULE: [wrkld]={(1.0/vips_per_lecture):0.2f} for VIP\"\nstacked_df.loc[(stacked_df['wrkld_sample_type'].isin(['VIP']))&(stacked_df['instructor_cnt']&gt;1.0),'wrkld_sample_note'] = f\"RULE: [wrkld]={(1.0/vips_per_lecture):0.2f} for VIP (co-teaching)\"\nstacked_df.loc[stacked_df['wrkld_sample_type'].isin(['VIP']),'sum_term_crse_wrkld_sample'] = stacked_df.loc[stacked_df['wrkld_sample_type'].isin(['VIP']),'sum_term_crse_wrkld_sample'] / vips_per_lecture\n\n\n\nDistinguish LAB workloads\nLaboratory sections (LAB) are an important part of an engineering and computer science curriculum.\nLAB sections require effort on the part of the faculty member, but at a reduced rate.\nIdentifying lab sections is tricky. The College often codes lab sections differently across departments. Some are coded properly as LAB sections.\nIn other cases, LAB sections are coded as LEC because they share the same CRN as their owner lecture. To capture these cases a special logic is introduced. If a section is taught once per week (e.g., M or W or TH) and the CRN has more than one meeting period, then the section with one meeting period is designated a LAB section.\n\n# Assign LAB workload\nlabs_per_lecture = model_sample['labs_per_lecture']\n\n# Assign LAB sections\nstacked_df.loc[(stacked_df['mtgs_per_crn']&gt;1)&(stacked_df['wrkld_sample_type']=='LEC')&(stacked_df['mtgs_per_wk']==1),'wrkld_sample_type'] = 'LAB'\n\n# Create a note for all LAB sections\nstacked_df.loc[stacked_df['wrkld_sample_type'].isin(['LAB']),'wrkld_sample_note'] = f\"RULE: [wrkld]={(1.0/labs_per_lecture):0.2f} for LAB\"\n\n# Assign workload\nstacked_df.loc[stacked_df['wrkld_sample_type'].isin(['LAB']),'sum_term_crse_wrkld_sample'] = stacked_df.loc[stacked_df['wrkld_sample_type'].isin(['LAB']),'sum_term_crse_wrkld_sample'] / labs_per_lecture\n\n# Create a special note for LAB sections that used the special logic to be identified.\nstacked_df.loc[(stacked_df['mtgs_per_crn']&gt;1)&(stacked_df['wrkld_sample_type']=='LAB')&(stacked_df['mtgs_per_wk']==1),'wrkld_sample_note'] = stacked_df.loc[(stacked_df['mtgs_per_crn']&gt;1)&(stacked_df['wrkld_sample_type']=='LAB')&(stacked_df['mtgs_per_wk']==1),'wrkld_sample_note'] + \" (LAB: 1 mtg per wk rule)\"\n\n\n\nDistinguish RES, IND and FLD\nRES, IND and FLD sections are variable unit placeholders in banner that contribute to the full-time status calculation of a student, but don’t necessarily reflect effort of the faculty mentor.\nResearch active faculty are most associated with RES, IND and FLD. To capture the workload we have two options:\n\nWe can associate these units with a non-zero workload value, or\nWe can reduce the workloads of research active faculty.\n\nTo do both would double-count the effort of RES, IND and FLD sections.\nFor purposes of this workload model, we’ll zero these out and let research active faculty have reduced workloads.\n\n# Exclude teaching credit for research (RES), independent study (IND), and intern/coop (FLD).\n# Credit is given for these activities in reduced teaching (research active) or summer pay.\nstacked_df.loc[stacked_df['wrkld_sample_type'].isin(['RES','IND','FLD']),'wrkld_sample_note'] = \"RULE: [wrkld]=0.00 for INS, RES and FLD\"\nstacked_df.loc[stacked_df['wrkld_sample_type'].isin(['RES','IND','FLD']),'sum_term_crse_wrkld_sample'] = model_sample['res_ind_fld_per_lecture']\n\n\n\nDistinguish SEM workloads\nThe seminar class is an important part of our curriculum and requires effort of those organizing the course.\nIn this workload model, the seminar counts as a full workload course.\n\n# Assign SEM workload\n# Ensure that SEM get full credit because we want to reward the faculty member for doing it!\n\nseminars_per_lecture = model_sample['seminars_per_lecture']\n\nstacked_df.loc[stacked_df['wrkld_sample_type'].isin(['SEM']),'wrkld_sample_note'] = f\"RULE: [wrkld] / {seminars_per_lecture} for SEM\"\nstacked_df.loc[(stacked_df['wrkld_sample_type'].isin(['SEM']))&(stacked_df['instructor_cnt']&gt;1.0),'wrkld_sample_note'] = f\"RULE: [wrkld] / {seminars_per_lecture} for SEM (co-teaching)\"\nstacked_df.loc[stacked_df['wrkld_sample_type'].isin(['SEM']),'sum_term_crse_wrkld_sample'] = stacked_df.loc[stacked_df['wrkld_sample_type'].isin(['SEM']),'sum_term_crse_wrkld_sample'] / seminars_per_lecture\n\n\n\nAdjust for large lectures\nLarger lectures require more effort. The code blocks below adjust the base workload for large classes.\n\n#  Process large classes using thresholds and weights in model_sample parameters.\n\nfor threshhold,weight in model_sample['large_classes']:\n    stacked_df.loc[(stacked_df['ACTUAL ENROLLMENT']&gt;=threshhold)&(stacked_df['wrkld_sample_type']=='LEC'),\"sum_term_crse_wrkld_sample\"] = weight / stacked_df[\"instructor_cnt\"]\n    stacked_df.loc[(stacked_df['ACTUAL ENROLLMENT']&gt;=threshhold)&(stacked_df['wrkld_sample_type']=='LEC'),\"wrkld_sample_note\"] = f\"BASE: [wrkld] = {weight} per CRN ENRL&gt;={threshhold}\"\n    stacked_df.loc[(stacked_df['ACTUAL ENROLLMENT']&gt;=threshhold)&(stacked_df['wrkld_sample_type']=='LEC')&(stacked_df['instructor_cnt']&gt;1.0),'wrkld_sample_note'] = f\"BASE: [wrkld]={weight/2.0} per CRN ENRL&gt;={threshhold} (co-teaching)\"\n\n\n\nExamples, checks and verifications\nThe following code blocks are added as unique situations are discovered. The code below shows how these situations are handled and demonstrates how they were corrected.\nAs odd situations are revealed, add a code block here to clearly show the inconsistency. Then, change the workload code above until the situation clears up AND you don’t screw up any of the other situations.\n\nExample: LECT / LAB\nIn this example, a lecture/lab course was coded as 3 separate CRN. Each CRN has a main lecture and a single-meeting-period lab.\nAll three lectures share the same meeting time and are combined into a single workload LECT. Each lab section is assigned 1/3 workload.\nHowever, two of the lab sections share a common meeting time, so they are combined into a single 1/3 workload section.\n\ndef show_block( df,keys,cols):\n    tdf = df\n    for key in keys.keys():\n        tdf = tdf[tdf[key]==keys[key]]\n    return tdf[cols]\n\nshow_block(stacked_df,\n    {'TERM':'202410','COURSE':'EGMN416'},\n    ['COURSE','CRN','TYPE','TITLE','instructor','time_code',\n    'sum_term_crse_crn',\n    'sum_term_crse_crn_mtg_students',\n    'sum_term_crse_crn_hours',\n    'sum_term_crse_wrkld_sample','wrkld_sample_type','wrkld_sample_note']\n)\n\n\n\n\n\n\n\n\nCOURSE\nCRN\nTYPE\nTITLE\ninstructor\ntime_code\nsum_term_crse_crn\nsum_term_crse_crn_mtg_students\nsum_term_crse_crn_hours\nsum_term_crse_wrkld_sample\nwrkld_sample_type\nwrkld_sample_note\n\n\n\n\n4117\nEGMN416\n45899\nLEC\nMECHATRONICS\nHadimani,Ravi\n....F..14001650\n0.5\n31.0\n46.5\n0.333333\nLAB\nRULE: [wrkld]=0.33 for LAB (LAB: 1 mtg per wk ...\n\n\n4118\nEGMN416\n45899\nLEC\nMECHATRONICS\nHadimani,Ravi\nM...F..13001350\n0.5\n31.0\n46.5\n0.333333\nLEC\nBASE: [wrkld] / 3 CRN at same time\n\n\n4119\nEGMN416\n32709\nLEC\nMECHATRONICS\nHadimani,Ravi\nM......14001650\n0.5\n30.0\n45.0\n0.166667\nLAB\nRULE: [wrkld]=0.33 for LAB (LAB: 1 mtg per wk ...\n\n\n4120\nEGMN416\n32709\nLEC\nMECHATRONICS\nHadimani,Ravi\nM...F..13001350\n0.5\n30.0\n45.0\n0.333333\nLEC\nBASE: [wrkld] / 3 CRN at same time\n\n\n4121\nEGMN416\n46922\nLEC\nMECHATRONICS\nHadimani,Ravi\nM......14001650\n0.5\n29.0\n43.5\n0.166667\nLAB\nRULE: [wrkld]=0.33 for LAB (LAB: 1 mtg per wk ...\n\n\n4122\nEGMN416\n46922\nLEC\nMECHATRONICS\nHadimani,Ravi\nM...F..13001350\n0.5\n29.0\n43.5\n0.333333\nLEC\nBASE: [wrkld] / 3 CRN at same time\n\n\n\n\n\n\n\n\nsum_term_crse_crn represents the number of unique CRNs. This value is split across multiple meeting times per CRN.\nsum_term_crse_crn_mtg_students represents the number of students in each crn-meeting time. This value is useful to determine how many students are in any given meeting time.\nsum_term_crse_crn_hours represents the number of credit hours associated with a CRN. This value is split across multiple meeting times.\n\n\n\nExample: LECT sharing a common time\nIn this example, two CRN are sharing a common teaching time and their workloads are split across the two CRN.\n\nshow_block(stacked_df,\n    {'TERM':'202320','instructor':\"Heise,Rebecca\"},\n    ['COURSE','CRN','TYPE','TITLE','instructor','time_code','sum_term_crse_wrkld_sample','wrkld_sample_type','wrkld_sample_note']\n)\n\n\n\n\n\n\n\n\nCOURSE\nCRN\nTYPE\nTITLE\ninstructor\ntime_code\nsum_term_crse_wrkld_sample\nwrkld_sample_type\nwrkld_sample_note\n\n\n\n\n3128\nEGRB111\n43476\nLEC\nINTRO TO BIOL SYS ENGINEERING\nHeise,Rebecca\nM.W.F..900950\n1.0\nLEC\nBASE: [wrkld]\n\n\n3150\nEGRB411\n40539\nLEC\nCELL MECHANICS & MECHANOBIOL\nHeise,Rebecca\nM.W.F..10001050\n0.5\nLEC\nBASE: [wrkld] / 2 CRN at same time\n\n\n3154\nEGRB491\n45797\nLEC\nST: PULMONARY LAB RESEARCH\nHeise,Rebecca\n.........\n1.0\nLEC\nBASE: [wrkld]\n\n\n3156\nEGRB517\n40540\nLEC\nCELL MECHANICS & MECHANOBIOLOG\nHeise,Rebecca\nM.W.F..10001050\n0.5\nLEC\nBASE: [wrkld] / 2 CRN at same time\n\n\n3164\nEGRB697\n28942\nRES\nDIRECTED RES IN BIOMEDICAL EGR\nHeise,Rebecca\n.........\n0.0\nRES\nRULE: [wrkld]=0.00 for INS, RES and FLD\n\n\n3171\nEGRB697\n45891\nRES\nDIRECTED RES IN BIOMEDICAL EGR\nHeise,Rebecca\n.........\n0.0\nRES\nRULE: [wrkld]=0.00 for INS, RES and FLD\n\n\n3194\nEGRB697\n28930\nRES\nDIRECTED RES IN BIOMEDICAL EGR\nHeise,Rebecca\n.........\n0.0\nRES\nRULE: [wrkld]=0.00 for INS, RES and FLD\n\n\n3195\nEGRB697\n28934\nRES\nDIRECTED RES IN BIOMEDICAL EGR\nHeise,Rebecca\n.........\n0.0\nRES\nRULE: [wrkld]=0.00 for INS, RES and FLD\n\n\n3196\nEGRB697\n45890\nRES\nDIRECTED RES IN BIOMEDICAL EGR\nHeise,Rebecca\n.........\n0.0\nRES\nRULE: [wrkld]=0.00 for INS, RES and FLD\n\n\n3590\nENGR701\n43901\nRES\nPOST-CANDIDACY DOCT RESEARCH\nHeise,Rebecca\n.........\n0.0\nRES\nRULE: [wrkld]=0.00 for INS, RES and FLD\n\n\n\n\n\n\n\n\n\nExample: Miscode?\nThis record shows two CRN overlapping in teaching time, but not exactly matching teaching times. Is this for real? Is this a miscode? My initial guess is that this is a miscode and the times should be corrected. This can be accomplished with a FIX record above.\n\nshow_block(stacked_df,\n    {'TERM':'202310','instructor':\"Ferri,James\"},\n    ['COURSE','CRN','TYPE','TITLE','instructor','time_code','MODALITY CODE','sum_term_crse_wrkld_sample','wrkld_sample_type','wrkld_sample_note']\n)\n\n\n\n\n\n\n\n\nCOURSE\nCRN\nTYPE\nTITLE\ninstructor\ntime_code\nMODALITY CODE\nsum_term_crse_wrkld_sample\nwrkld_sample_type\nwrkld_sample_note\n\n\n\n\n2676\nCLSE301\n42633\nLEC\nTRANSPORT PHENOMENA I\nFerri,James\n.T.R...15301645\nRINP\n1.0\nLEC\nBASE: [wrkld]\n\n\n2688\nCLSE585\n44879\nLEC\nINTERFACIAL PHENOMENA\nFerri,James\n..W....17001930\nRINP\n1.0\nLEC\nBASE: [wrkld]\n\n\n2700\nCLSE697\n37469\nRES\nDIRECTED RESEARCH\nFerri,James\n.........\nRINS\n0.0\nRES\nRULE: [wrkld]=0.00 for INS, RES and FLD\n\n\n2707\nCLSE697\n37073\nRES\nDIRECTED RESEARCH\nFerri,James\n.........\nRINS\n0.0\nRES\nRULE: [wrkld]=0.00 for INS, RES and FLD\n\n\n2991\nENGR591\n44935\nLEC\nTOP: SYSTEMS ENGINEERING I\nFerri,James\n.........\nRONA\n1.0\nLEC\nBASE: [wrkld]\n\n\n2999\nENGR691\n44989\nLEC\nST:ADV TOP IN INTERFACIAL PHEN\nFerri,James\n..W....17001900\nRINP\n1.0\nLEC\nBASE: [wrkld]\n\n\n3004\nENGR701\n43323\nRES\nPOST-CANDIDACY DOCT RESEARCH\nFerri,James\n.........\nRINS\n0.0\nRES\nRULE: [wrkld]=0.00 for INS, RES and FLD\n\n\n\n\n\n\n\n\n\nExample: Singleton ROND\nThis shows a singleton ROND sections. Synchronous on-line sections (ROND) should always be taught with an in-person section. In this case I can only imagine that no students enrolled in the RINP/face-to-face section and it was dropped during earlier data cleaning.\n\nshow_block(stacked_df,\n    {'TERM':'202320','instructor':\"Manic,Milos\"},\n    ['COURSE','CRN','TYPE','TITLE','instructor','time_code','MODALITY CODE','sum_term_crse_wrkld_sample','wrkld_sample_type','wrkld_sample_note']\n)\n\n\n\n\n\n\n\n\nCOURSE\nCRN\nTYPE\nTITLE\ninstructor\ntime_code\nMODALITY CODE\nsum_term_crse_wrkld_sample\nwrkld_sample_type\nwrkld_sample_note\n\n\n\n\n3085\nCMSC636\n44831\nLEC\nNEURAL NETS AND DEEP LEARNING\nManic,Milos\nM.W....12001315\nROND\n1.000000\nLEC\nBASE: [wrkld]\n\n\n3101\nCMSC697\n36849\nRES\nDIRECTED RESEARCH\nManic,Milos\n.........\nRINS\n0.000000\nRES\nRULE: [wrkld]=0.00 for INS, RES and FLD\n\n\n3102\nCMSC697\n36851\nRES\nDIRECTED RESEARCH\nManic,Milos\n.........\nRINS\n0.000000\nRES\nRULE: [wrkld]=0.00 for INS, RES and FLD\n\n\n3559\nENGR497\n45526\nLAB\nVERTICALLY INTEGRATED PROJECTS\nManic,Milos\n.........\nRINS\n0.333333\nVIP\nRULE: [wrkld]=0.33 for VIP\n\n\n3560\nENGR497\n45527\nLAB\nVERTICALLY INTEGRATED PROJECTS\nManic,Milos\n.........\nRINS\n0.333333\nVIP\nRULE: [wrkld]=0.33 for VIP\n\n\n\n\n\n\n\n\n\nExample: Doubleton ROND+RINP\nThis second example shows a doubleton ROND+RINP section.\n\nshow_block(stacked_df,\n    {'TERM':'202410','instructor':\"Ghosh,Preetam\"},\n    ['COURSE','CRN','TYPE','TITLE','instructor','time_code','MODALITY CODE','sum_term_crse_wrkld_sample','wrkld_sample_type','wrkld_sample_note']\n)\n\n\n\n\n\n\n\n\nCOURSE\nCRN\nTYPE\nTITLE\ninstructor\ntime_code\nMODALITY CODE\nsum_term_crse_wrkld_sample\nwrkld_sample_type\nwrkld_sample_note\n\n\n\n\n3749\nCMSC441\n43750\nLAB\nSR DESIGN STUDIO I (LAB/PROJ)\nGhosh,Preetam\n.........\nRONL\n0.666667\nCAP\nRULE: [wrkld]=0.33 for every 4.0 students in C...\n\n\n3771\nCMSC502\n37708\nLEC\nPARALLEL ALGORITHMS\nGhosh,Preetam\n.T.R...15301645\nRINP\n0.500000\nLEC\nBASE: [wrkld] / 2 CRN at same time\n\n\n3772\nCMSC502\n37709\nLEC\nPARALLEL ALGORITHMS\nGhosh,Preetam\n.T.R...15301645\nROND\n0.500000\nLEC\nBASE: [wrkld] / 2 CRN at same time\n\n\n3797\nCMSC697\n37384\nRES\nDIRECTED RESEARCH\nGhosh,Preetam\n.........\nRINS\n0.000000\nRES\nRULE: [wrkld]=0.00 for INS, RES and FLD\n\n\n3798\nCMSC697\n37385\nRES\nDIRECTED RESEARCH\nGhosh,Preetam\n.........\nRINS\n0.000000\nRES\nRULE: [wrkld]=0.00 for INS, RES and FLD\n\n\n3799\nCMSC697\n37386\nRES\nDIRECTED RESEARCH\nGhosh,Preetam\n.........\nRINS\n0.000000\nRES\nRULE: [wrkld]=0.00 for INS, RES and FLD\n\n\n4261\nENGR701\n46939\nRES\nPOST-CANDIDACY DOCT RESEARCH\nGhosh,Preetam\n.........\nRINS\n0.000000\nRES\nRULE: [wrkld]=0.00 for INS, RES and FLD\n\n\n\n\n\n\n\n\n\nExample: odd counting\nVerifying actual enrollment vs sum_term_crse_wrkld_sample\n\nshow_block(stacked_df,\n    {'TERM':'202410','instructor':\"Duke,Debra\",'COURSE':'CMSC256'},\n    ['COURSE','CRN','TYPE','TITLE','instructor','time_code','MODALITY CODE','ACTUAL ENROLLMENT','MAX CREDITS','time_code','sum_term_crse_crn_mtg_students','sum_term_crse_crn_hours',\n    'sum_term_crse_wrkld_sample','wrkld_sample_type','wrkld_sample_note']\n)\n\n\n\n\n\n\n\n\nCOURSE\nCRN\nTYPE\nTITLE\ninstructor\ntime_code\nMODALITY CODE\nACTUAL ENROLLMENT\nMAX CREDITS\ntime_code\nsum_term_crse_crn_mtg_students\nsum_term_crse_crn_hours\nsum_term_crse_wrkld_sample\nwrkld_sample_type\nwrkld_sample_note\n\n\n\n\n3719\nCMSC256\n36067\nLEC\nDATA STRUCTURE & OBJECT PROG\nDuke,Debra\n..W....13001450\nRONB\n83\n4\n..W....13001450\n83.0\n166.0\n0.333333\nLAB\nRULE: [wrkld]=0.33 for LAB (LAB: 1 mtg per wk ...\n\n\n3720\nCMSC256\n36067\nLEC\nDATA STRUCTURE & OBJECT PROG\nDuke,Debra\n.T.R...12301345\nRONB\n83\n4\n.T.R...12301345\n83.0\n166.0\n1.500000\nLEC\nBASE: [wrkld] = 1.5 per CRN ENRL&gt;=80\n\n\n3721\nCMSC256\n41689\nLEC\nDATA STRUCTURE & OBJECT PROG\nDuke,Debra\n..W....16001750\nROND\n31\n4\n..W....16001750\n31.0\n62.0\n0.333333\nLAB\nRULE: [wrkld]=0.33 for LAB (LAB: 1 mtg per wk ...\n\n\n3722\nCMSC256\n41689\nLEC\nDATA STRUCTURE & OBJECT PROG\nDuke,Debra\n.T.R...16001715\nROND\n31\n4\n.T.R...16001715\n31.0\n62.0\n1.000000\nLEC\nBASE: [wrkld]"
  },
  {
    "objectID": "20_clean.html#store-the-dataframe",
    "href": "20_clean.html#store-the-dataframe",
    "title": "Cleaning the data",
    "section": "Store the dataframe",
    "text": "Store the dataframe\nWe’re storing both the stacked and unstacked data. Note that the aggregate measures are stored with the stacked data only.\n\nStore to a local CSV file\n\n# Store as CSV files\nsections_df.to_csv('sections_df.csv', index=False)\nstacked_df.to_csv('stacked_df.csv', index=False)\n\n\n\nStore the data in google sheets\n\n# Open the worksheet \nspreadsheet_key = \"1ZK7k8M85CXLof6FdeJYJuGFbfjsOXrCv5mc7OgUInWw\"\nworksheet_name = \"Source data\"\n\ndata_to_write = stacked_df.to_records(index=False)\ntry:\n    sheet = client.open_by_key(spreadsheet_key).worksheet(worksheet_name)\nexcept:\n    sheet = client.open_by_key(spreadsheet_key).add_worksheet( \n        title = worksheet_name,nrows=100,ncols=10\n    )\nsheet.clear()\nset_with_dataframe(worksheet=sheet, dataframe=stacked_df, include_index=False,include_column_header=True, resize=True)\n\n\n\nFreshen persistent instructor data\nThis block identifies any instructors not found in the persistent instructor data and adds them to the list with default values.\nThis code is not working yet. It should be fixed when a new semester is added and new instructors and courses are discovered in the imported worksheets.\n\n#worksheet_name = \"Instructor data\"\n#summary_df = stacked_df.groupby('instructor')[['COLLEGE','DEPT']].apply(lambda x: x.mode().iloc[0]).#reset_index()\n#summary_df = summary_df.sort_values(by=['COLLEGE','DEPT','instructor'])\n#data_to_write = summary_df.to_records(index=False)\n#try:\n#    sheet = client.open_by_key(spreadsheet_key).worksheet(worksheet_name)\n#except:\n#    nrows,ncols = summary_df.shape\n#    sheet = client.open_by_key(spreadsheet_key).add_worksheet( \n#        title = worksheet_name,rows=nrows+1,cols=ncols+1\n#    )\n#sheet.clear()\n#set_with_dataframe(worksheet=sheet, dataframe=summary_df, include_index=False,include_column_header=True, resize=True)\n\n# Find names in df2 that are not in df1\n##names_to_add = df2[~df2['name'].isin(df1['name'])]\n\n# Add the rows with missing names from df2 to df1\n## df1 = pd.concat([df1, names_to_add], ignore_index=True)"
  },
  {
    "objectID": "20_clean.html#summary",
    "href": "20_clean.html#summary",
    "title": "Cleaning the data",
    "section": "Summary",
    "text": "Summary\nThat’s all folks! Additional models can be added and the google sheets can be reviewed.\nNow the real analysis can begin:\n\nhere is a link to a google sheet that shows tables created from the dataframe.\nhere is a HTML report that is still evolving."
  },
  {
    "objectID": "10_download.html",
    "href": "10_download.html",
    "title": "Downloading the data",
    "section": "",
    "text": "Data were pulled from the VCU Reporting Center in the Staff | Course Schedule Report as shown below:\nReports are run by semester for the College of Engineering and stored in separate files. Care should be taken to open each file after it’s been saved and RESAVE the file into XLSX format.\n\n\n\n\n\n\n\n\n\n\nThe files are named appropriately and stored in the data folder in this repository.\n\n\n\n\n\nFile name\nTerm Code\nAcad Year\nPeriod Code\nPeriod Name\n\n\n\n\nVCU-SOC-202110-FA2020.xlsx\n202110\nAY20-21\nFA2020\nFall 2020\n\n\nVCU-SOC-202120-SP2021.xlsx\n202120\nAY20-21\nSP2021\nSpring 2021\n\n\nVCU-SOC-202130-SU2021.xlsx\n202130\nAY20-21\nSU2021\nSummer 2021\n\n\nVCU-SOC-202210-FA2021.xlsx\n202210\nAY21-22\nFA2021\nFall 2021\n\n\nVCU-SOC-202220-SP2022.xlsx\n202220\nAY21-22\nSP2022\nSpring 2022\n\n\nVCU-SOC-202230-SU2022.xlsx\n202230\nAY21-22\nSU2022\nSummer 2022\n\n\nVCU-SOC-202310-FA2022.xlsx\n202310\nAY22-23\nFA2022\nFall 2022\n\n\nVCU-SOC-202320-SP2023.xlsx\n202320\nAY22-23\nSP2023\nSpring 2023\n\n\nVCU-SOC-202330-SU2023.xlsx\n202330\nAY22-23\nSU2023\nSummer 2023\n\n\nVCU-SOC-202410-FA2023.xlsx\n202410\nAY23-24\nFA2023\nFall 2023\n\n\n\n\n\nThese data are difficult to work in separate files and often contain incorrect or inconsistent data. A significant process of data cleaning was undertaken prior to computing workloads."
  },
  {
    "objectID": "10_download.html#data-sources",
    "href": "10_download.html#data-sources",
    "title": "Downloading the data",
    "section": "",
    "text": "Data were pulled from the VCU Reporting Center in the Staff | Course Schedule Report as shown below:\nReports are run by semester for the College of Engineering and stored in separate files. Care should be taken to open each file after it’s been saved and RESAVE the file into XLSX format.\n\n\n\n\n\n\n\n\n\n\nThe files are named appropriately and stored in the data folder in this repository.\n\n\n\n\n\nFile name\nTerm Code\nAcad Year\nPeriod Code\nPeriod Name\n\n\n\n\nVCU-SOC-202110-FA2020.xlsx\n202110\nAY20-21\nFA2020\nFall 2020\n\n\nVCU-SOC-202120-SP2021.xlsx\n202120\nAY20-21\nSP2021\nSpring 2021\n\n\nVCU-SOC-202130-SU2021.xlsx\n202130\nAY20-21\nSU2021\nSummer 2021\n\n\nVCU-SOC-202210-FA2021.xlsx\n202210\nAY21-22\nFA2021\nFall 2021\n\n\nVCU-SOC-202220-SP2022.xlsx\n202220\nAY21-22\nSP2022\nSpring 2022\n\n\nVCU-SOC-202230-SU2022.xlsx\n202230\nAY21-22\nSU2022\nSummer 2022\n\n\nVCU-SOC-202310-FA2022.xlsx\n202310\nAY22-23\nFA2022\nFall 2022\n\n\nVCU-SOC-202320-SP2023.xlsx\n202320\nAY22-23\nSP2023\nSpring 2023\n\n\nVCU-SOC-202330-SU2023.xlsx\n202330\nAY22-23\nSU2023\nSummer 2023\n\n\nVCU-SOC-202410-FA2023.xlsx\n202410\nAY23-24\nFA2023\nFall 2023\n\n\n\n\n\nThese data are difficult to work in separate files and often contain incorrect or inconsistent data. A significant process of data cleaning was undertaken prior to computing workloads."
  },
  {
    "objectID": "30_explore.html",
    "href": "30_explore.html",
    "title": "Exploring the data",
    "section": "",
    "text": "For this analysis we’ll be using the stacked_df data frame from the cleaning process.\nI haven’t spend much time on this. My effort to date has been spent on developing and documenting the preparing of the data at the instructor level.\nSignificant effort was also invested in the corresponding google workbook."
  },
  {
    "objectID": "30_explore.html#columns-in-the-dataframe",
    "href": "30_explore.html#columns-in-the-dataframe",
    "title": "Exploring the data",
    "section": "Columns in the dataframe",
    "text": "Columns in the dataframe\n\n\nIndex(['TERM', 'PART_OF_TERM', 'COLLEGE', 'DEPT', 'COURSE', 'SECT', 'CRN',\n       'TYPE', 'MIN CREDITS', 'MAX CREDITS', 'TITLE', 'CROSS-LIST', 'MAX SIZE',\n       'ACTUAL ENROLLMENT', 'WAITLIST MAX', 'WAITLIST ACTUAL', 'START DATE',\n       'END DATE', 'MON-IND', 'TUE-IND', 'WED-IND', 'THU-IND', 'FRI-IND',\n       'SAT-IND', 'SUN-IND', 'BEGIN TIME', 'END TIME', 'BUILDING', 'ROOM',\n       'MODALITY CODE', 'MODALITY TEXT', 'CROSS_LIST_MAXIMUM_ENROLLMENT',\n       'CROSS_LIST_ENROLLMENT', 'file_name', 'term_code', 'academic_year',\n       'period_code', 'period_name', 'fixes', 'fix_notes', 'instructor source',\n       'instructor', 'course_subject', 'course_number', 'instructor_cnt',\n       'capstone_cnt', 'spare_col_1', 'spare_col_2', 'spare_col_3',\n       'spare_col_4', 'spare_col_5', 'spare_col_6', 'ins_college', 'ins_dept',\n       'ins_role', 'ins_wrkld', 'ins_wrkld_target', 'ins_spare1', 'ins_spare2',\n       'ins_url_vcu', 'ins_url_linkedin', 'ins_url_google_scholar',\n       'ins_note1', 'crse', 'crse_level', 'crse_with_url', 'crse_note',\n       'crse_spare1', 'crse_spare2', 'time_code', 'time_id', 'room_code',\n       'room_id', 'meeting_code', 'meeting_id', 'mtgs_per_wk', 'mtg_length',\n       'shared_mtgs_cnt', 'mtgs_per_crn', 'combined_count',\n       'combined_sections', 'sum_term', 'sum_term_crse', 'sum_term_crse_crn',\n       'sum_term_crse_crn_mtg_students', 'sum_term_crse_crn_hours',\n       'wrkld_sample_type', 'sum_term_crse_wrkld_sample', 'wrkld_sample_note',\n       'wrkld_a_type', 'sum_term_crse_wrkld_a', 'wrkld_a_note', 'wrkld_b_type',\n       'sum_term_crse_wrkld_b', 'wrkld_b_note', 'wrkld_c_type',\n       'sum_term_crse_wrkld_c', 'wrkld_c_note'],\n      dtype='object')"
  },
  {
    "objectID": "30_explore.html#college-wide-measures-over-time",
    "href": "30_explore.html#college-wide-measures-over-time",
    "title": "Exploring the data",
    "section": "College-wide measures over time",
    "text": "College-wide measures over time\nThis table presents a summary of courses (e.g., CMSC 255, CMSC 355, etc.), sections (or CRN), and student enrollments by semester in our data file.\n\n\n\n\n\nTerm\nTerm Name\nCourse Sum\nCRN Sum\nStuMtg Sum\nHours Sum\n\n\n\n\n202110\nFall 2020\n149\n416\n7967\n15929\n\n\n202120\nSpring 2021\n137\n444\n7393\n16400\n\n\n202130\nSummer 2021\n25\n112\n586\n1444\n\n\n202210\nFall 2021\n154\n422\n7362\n16329\n\n\n202220\nSpring 2022\n146\n448\n7327\n16677\n\n\n202230\nSummer 2022\n29\n107\n626\n1343\n\n\n202310\nFall 2022\n159\n434\n8306\n18012\n\n\n202320\nSpring 2023\n146\n458\n7692\n17790\n\n\n202330\nSummer 2023\n25\n104\n564\n1213\n\n\n202410\nFall 2023\n157\n451\n9497\n21222"
  },
  {
    "objectID": "30_explore.html#teaching-for-fall-2023-by-subject",
    "href": "30_explore.html#teaching-for-fall-2023-by-subject",
    "title": "Exploring the data",
    "section": "Teaching for Fall 2023 by subject",
    "text": "Teaching for Fall 2023 by subject\n\n\n\n\n\nDept\nCourse Sum\nCRN Sum\nStudent Sum\nHours Sum\n\n\n\n\nCMSC\n35\n95\n3552\n9235\n\n\nEGRB\n31\n64\n994\n2211\n\n\nEGRC\n14\n40\n432\n1021\n\n\nEGRE\n32\n70\n1488\n2803\n\n\nEGRM\n32\n103\n2215\n4925\n\n\nENGR\n13\n79\n816\n1027"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This site was creating in quarto."
  }
]