---
title: Exploring instructor measures
---

For this analysis we'll be using the *stacked_df* data frame from the cleaning process.

I haven't spend much time on this.  My effort to date has been spent on developing 
and documenting the preparing of the data at the instructor level.

Significant effort was also invested in the [corresponding google workbook](https://docs.google.com/spreadsheets/d/1ZK7k8M85CXLof6FdeJYJuGFbfjsOXrCv5mc7OgUInWw/edit#gid=1484314377).

**HUYEN** - In the workbook above:

* Here is a [sample figure](https://docs.google.com/spreadsheets/d/1ZK7k8M85CXLof6FdeJYJuGFbfjsOXrCv5mc7OgUInWw/edit#gid=2030685887) for the OJS dashboard.

* Here is a [summary table](https://docs.google.com/spreadsheets/d/1ZK7k8M85CXLof6FdeJYJuGFbfjsOXrCv5mc7OgUInWw/edit#gid=1484314377) with all the data needed to display.

* You'll need to *recreate* the sample table using OJS using the stacked_df.csv file.

* Here is an [example worksheet](https://docs.google.com/spreadsheets/d/1ZK7k8M85CXLof6FdeJYJuGFbfjsOXrCv5mc7OgUInWw/edit#gid=1220455780) of the underlying details (the pop-up card).  This table shows all instructors, the pop-up should show only the data for the hovered instructor.


## Columns in the dataframe

```{python}
#| echo: false
import os
import pathlib
import matplotlib.pyplot as plt
from IPython.display import Markdown
from tabulate import tabulate
import pandas as pd
import numpy as np
```

Load the data frame.  The OJS code would like slightly different.

```{python}
# Load the data frame
stacked_df = pd.read_csv('stacked_df.csv')

# Strip whitespace from column names
stacked_df.columns = stacked_df.columns.str.strip()

# Force types of these columns to be strings
for col in ['TERM','COURSE','SECT']:
  stacked_df[col] = stacked_df[col].astype(str)

# print the columns.  Pandas will display an abbreviated table.
print(stacked_df.columns)
```

## College-wide measures over time

Key measures for these data include:

* Number of Courses : A *course* is designed by a course number, for example, CMSC 508 or CMSC 210 or CMSC 355. In the table below, we present the sum of unique course numbers.
* Number of CRNs : A CRN is a "course reference number".  Often a single course will be coded in Banner using multiple CRNS, one for each unique meeting time/place.  The *CRN SUM* column presents the sum of individual CRNs.
* StuMtgSum : *number of individual student meetings*. Student enroll in CRNs, not courses.  The *stumtgsum* measure represents the sum of students across all CRN.  Depending on how a course is coded, this may double count students in an individual course.
* Hours Sum : There are several ways to calculate this variable. In general, this is calculated on a PER CRN basis, multiplying the unique headcount in the CRN time the credit-hour value of a course (usually, 2, 3 or 4).

The table below shows these key measures accumulated by all semesters in the data set.

```{python}
# Create my four desired columns

# lecture hours and non-lecture hours
stacked_df['sum_term_crse_crn_hours_lec'] = 0.0
stacked_df['sum_term_crse_crn_hours_non_lec'] = 0.0
stacked_df.loc[stacked_df['wrkld_sample_type'] == 'LEC', 'sum_term_crse_crn_hours_lec'] = stacked_df['sum_term_crse_crn_hours']
stacked_df.loc[stacked_df['wrkld_sample_type'] != 'LEC', 'sum_term_crse_crn_hours_non_lec'] = stacked_df['sum_term_crse_crn_hours']

# lecture workload and non-lecture workload
stacked_df['sum_term_crse_wrkld_sample_lec'] = stacked_df['sum_term_crse_wrkld_sample_lec']
stacked_df['sum_term_crse_wrkld_sample_non_lec'] = stacked_df['sum_term_crse_wrkld_sample'] - stacked_df['sum_term_crse_wrkld_sample_lec']

```

```{python}
summary_df = stacked_df.groupby(['TERM','period_name']).agg(
  {'sum_term_crse':'sum',
  'sum_term_crse_crn':'sum',
  'sum_term_crse_crn_mtg_students':'sum',
  'sum_term_crse_wrkld_sample_lec':'sum',
  'sum_term_crse_wrkld_sample':'sum',
  'sum_term_crse_crn_hours':'sum'}).reset_index()

Markdown(tabulate(
  summary_df, 
  headers=['Term','Term Name','Course Sum','CRN Sum','StuMtg Sum','Hours Sum'],
  numalign="right",stralign="left",
  showindex=False,
  floatfmt=".0f"  # Format numbers without decimals
))

```

## Aggregate measures over all semesters

```{python}
#| echo: false
#| 
X_column = 'period_name'
Y_column = 'sum_term_crse_crn_hours'

plt.bar(summary_df[X_column], summary_df[Y_column])

plt.xticks(rotation=45, ha='right')

plt.xlabel('Semester')
plt.ylabel('Sum of Credit Hours')
plt.title("Credit hours taught by semester")

plt.show()

```


## Instructor measures for Spring 2023 and Fall 2023.

```{python}

# Filter stacked data frame for the two desired terms and desired department
df = stacked_df[stacked_df['TERM'].isin(['202320','202410'])]
df = df[df['DEPT'].isin(['CMSC'])]

# Create summary data frame by instructor for key measures.
summary_df = df.groupby(['instructor_name']).agg({
  'sum_term_crse':'sum',
  'sum_term_crse_crn_hours':'sum',
  'sum_term_crse_wrkld_sample_lec':'sum',
  'sum_term_crse_wrkld_sample_non_lec':'sum',
  'sum_term_crse_crn_hours_lec':'sum',
  'sum_term_crse_crn_hours_non_lec':'sum'
  }).reset_index()

# Sort in descending order by credit hours
summary_df = summary_df.sort_values(by='sum_term_crse_crn_hours', ascending=False)
print(summary_df)
```

## Show summary table

```{python}
# Print table
Markdown(tabulate(
  summary_df, 
  headers=['instructor_name','Crses','Hours','Wrkld LEC','Wrkld NON','Hours LEC','Hours NON'],
  numalign="right",stralign="left",
  showindex=False,
  floatfmt=".1f"  # Format numbers without decimals
))

```

## Plot total hours without colors

```{python}
#| echo: false
#| eval: true
#| 
X_column = 'instructor_name'
Y_column = 'sum_term_crse_crn_hours'

plt.barh(summary_df[X_column], summary_df[Y_column])

#plt.xticks(rotation=45, ha='right')

plt.xlabel('Credit Hours')
plt.ylabel('CMSC Instructor')
plt.title("Credit hours for Spring 2023 and Fall 2023")

plt.tick_params(axis='y', labelsize=6)  # Adjust the labelsize as needed

plt.gca().invert_yaxis()
plt.show()

```

## Hours (lec and non-lec) by instructor

```{python}
fig, ax = plt.subplots(figsize=(10, 6))

summary_df = summary_df.sort_values(by='sum_term_crse_crn_hours_lec', ascending=False)

instructors = summary_df['instructor_name'].str.split(",").str[0]
lec_hours = summary_df['sum_term_crse_crn_hours_lec']
non_lec_hours = summary_df['sum_term_crse_crn_hours_non_lec']

#bottom = np.zeros(len(instructors))

p1 = ax.barh(instructors, lec_hours, label='LEC', color='blue')
p2 = ax.barh(instructors, non_lec_hours, left=lec_hours, label='Non-LEC', color='orange')

ax.set_xlabel('Total Hours')
ax.set_ylabel('instructor_name')
ax.set_title('Instructor Hours by LEC and Non-LEC')
ax.legend()

plt.tick_params(axis='y', labelsize=6)  # Adjust the labelsize as needed

plt.gca().invert_yaxis()
plt.show()
```

## Workload by instructor and non-instructor

```{python}
fig, ax = plt.subplots(figsize=(10, 6))

summary_df = summary_df.sort_values(by='sum_term_crse_wrkld_sample_lec', ascending=False)

instructors = summary_df['instructor_name'].str.split(",").str[0]
lec = summary_df['sum_term_crse_wrkld_sample_lec']
non_lec = summary_df['sum_term_crse_wrkld_sample_non_lec']

#bottom = np.zeros(len(instructors))

p1 = ax.barh(instructors, lec, label='LEC', color='blue')
p2 = ax.barh(instructors, non_lec, left=lec, label='Non-LEC', color='orange')

ax.set_xlabel('Total Hours')
ax.set_ylabel('instructor_name')
ax.set_title('Instructor Workload by LEC and Non-LEC')
ax.legend()

plt.tick_params(axis='y', labelsize=6)  # Adjust the labelsize as needed

plt.gca().invert_yaxis()
plt.show()
```

## Practice with multiple bars

```{python}
import pandas as pd
import matplotlib.pyplot as plt
import random

instructors = ['Instructor ' + chr(65 + i) for i in range(25)]
values1 = [random.uniform(0., 7.) for _ in range(25)]
values2 = [random.uniform(0., 7,) for _ in range(25)]

data = {
    'instructor_name': instructors,
    'Value1': values1,
    'Value2': values2,
}

# Create a DataFrame
df = pd.DataFrame(data)
df = df.sort_values(by='Value2', ascending=True)

# Set the figure size
plt.figure(figsize=(8, 4))

# Create the left subplot (left bar)
ax1 = plt.subplot(121)
ax1.barh(df['instructor_name'], -1.0 * df['Value1'], color='green', label='Left Bar')
ax1.set_xlim(-7, 0)  # Set x-axis limits
ax1.set_xlabel('Values')
ax1.set_title('Left Bar')
ax1.set_yticklabels([""] * len(df['instructor_name']))
ax1.yaxis.tick_right()  # Move y-axis ticks to the right
#ax1.set_yticklabels([])  # Remove y-axis labels

# Remove border from the left subplot
ax1.spines['top'].set_visible(False)
ax1.spines['right'].set_visible(False)

# Create the right subplot (right bar)
ax2 = plt.subplot(122)
ax2.barh(df['instructor_name'], df['Value2'], color='blue', label='Right Bar')
ax2.set_xlim(0, 7)  # Set x-axis limits
ax2.set_xlabel('Values')
ax2.set_title('Right Bar')

# Remove border from the right subplot
ax2.spines['top'].set_visible(False)
ax2.spines['left'].set_visible(False)
#ax2.yaxis.tick_right()  # Move y-axis ticks to the right

# Adjust spacing between subplots
plt.tight_layout()
plt.tick_params(axis='y', labelsize=6)  # Adjust the labelsize as needed

# Show the plot
plt.show()

```
