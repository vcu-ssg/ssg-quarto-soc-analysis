{"title":"Exploring the data","markdown":{"yaml":{"title":"Exploring the data"},"headingText":"Columns in the dataframe","containsRefs":false,"markdown":"\n\nFor this analysis we'll be using the *stacked_df* data frame from the cleaning process.\n\n\n```{python}\n#| echo: false\nimport os\nimport pathlib\nimport matplotlib.pyplot as plt\nfrom IPython.display import Markdown\nfrom tabulate import tabulate\nimport pandas as pd\nimport numpy as np\n\nstacked_df = pd.read_csv('stacked_df.csv')\n\nfor col in ['TERM','COURSE','SECT']:\n  stacked_df[col] = stacked_df[col].astype(str)\n\nprint(stacked_df.columns)\n```\n\n## College-wide measures over time\n\nThis table presents a summary of courses (e.g., CMSC 255, CMSC 355, etc.), sections (or CRN), and student enrollments by semester in our data file.\n\n```{python}\n#| echo: false\nsummary_df = stacked_df.groupby(['TERM','period_name']).agg({'sum_term_crse':'sum','sum_term_crse_crn':'sum','sum_term_crse_crn_students':'sum','sum_term_crse_crn_hours':'sum'}).reset_index()\n\nMarkdown(tabulate(\n  summary_df, \n  headers=['Term','Term Name','Course Sum','CRN Sum','Student Sum','Hours Sum'],\n  numalign=\"right\",stralign=\"left\",\n  showindex=False,\n  floatfmt=\".0f\"  # Format numbers without decimals\n))\n\n```\n\n```{python}\n#| echo: false\n#| \nX_column = 'period_name'\nY_column = 'sum_term_crse_crn_students'\n\nplt.bar(summary_df[X_column], summary_df[Y_column])\n\nplt.xticks(rotation=45, ha='right')\n\nplt.xlabel('Semester')\nplt.ylabel('Sum of Section Enrollments')\nplt.title(\"Students taught by semester\")\n\nplt.show()\n\n```\n\n\n## Teaching for Fall 2023 by department\n\n```{python}\n#| echo: false\n\ndf = stacked_df[stacked_df['TERM'] == '202410']\n\nsummary_df = df.groupby(['DEPT']).agg({'sum_term_crse':'sum','sum_term_crse_crn':'sum','sum_term_crse_crn_students':'sum','sum_term_crse_crn_hours':'sum'}).reset_index()\n\nMarkdown(tabulate(\n  summary_df, \n  headers=['Dept','Course Sum','CRN Sum','Student Sum','Hours Sum'],\n  numalign=\"right\",stralign=\"left\",\n  showindex=False,\n  floatfmt=\".0f\"  # Format numbers without decimals\n))\n\n```\n\n\n```{python}\n#| echo: false\n#| \nX_column = 'DEPT'\nY_column = 'sum_term_crse_crn_students'\n\nplt.bar(summary_df[X_column], summary_df[Y_column])\n\nplt.xticks(rotation=45, ha='right')\n\nplt.xlabel('Department')\nplt.ylabel('Sum of Section Enrollments')\nplt.title(\"Students taught for Fall 2023\")\n\nplt.show()\n\n```\n\n## Fall 2023 CMSC Courses\n\n```{python}\n#| echo: false\n\nfactors = ['COURSE','CRN','TITLE','TYPE','instructor','MODALITY TEXT']\nmeasures = {'sum_term_crse':'sum','sum_term_crse_crn':'sum','sum_term_crse_crn_students':'sum','sum_term_crse_crn_hours':'sum'}\nmnames = ['CRSE sum','CRN sum','STDNTS sum','HRS sum']\n\ncols = [factor for factor in factors]+list(measures.keys())\ncnames = list(factors)+list(mnames)\ndf = stacked_df[\n    (stacked_df['TERM'] == '202410')\n    & (stacked_df['DEPT'] == 'CMSC')\n]\n\nsummary_df = df.groupby(factors).agg(measures).reset_index()\nsummary_df = summary_df.sort_values(by=factors, ascending=True)\n#summary_df = summary_df.sort_values(by='sum_term_crse_crn_students', ascending=False)\n\nMarkdown(tabulate(\n  summary_df, \n  headers=cnames,\n  numalign=\"right\",stralign=\"left\",\n  showindex=False\n))\n\n```\n\n## Fall 2023 CMSC Instructors\n\nThis table aggregates teaching by instructor and course. The table is sorted by instructor and course.\n\n\n```{python}\n#| echo: false\nfactors = ['COURSE','TITLE','TYPE','instructor']\nmeasures = {'sum_term_crse':'sum','sum_term_crse_crn':'sum','sum_term_crse_crn_students':'sum','sum_term_crse_crn_hours':'sum'}\nmnames = ['CRSE sum','CRN sum','STDNTS sum','HRS sum']\n\n# get list of instructors teaching CMSC courses\n\ninstructors = list(stacked_df[\n    (stacked_df['TERM'] == '202410')\n    & (stacked_df['DEPT'] == 'CMSC')\n][\"instructor\"].unique())\n\n# select all courses taught by instructors.  Some faculty teach ENGR courses!\n\ncols = [factor for factor in factors]+list(measures.keys())\ncnames = list(factors)+list(mnames)\ndf = stacked_df[\n    (stacked_df['TERM'] == '202410')\n    & (stacked_df['instructor'].isin(instructors))\n]\n\nsummary_df = df.groupby(factors).agg(measures).reset_index()\nsummary_df = summary_df.sort_values(by=['instructor','COURSE'], ascending=True)\n\nMarkdown(tabulate(\n  summary_df, \n  headers=cnames,\n  numalign=\"right\",stralign=\"left\",\n  showindex=False\n))\n\n```\n\n## Fall 2023 CMSC Teaching loads\n\nThe table below shows credit hours by type of course for faculty in CMSC. \n\n* [Credit hour definitions](https://bulletin.vcu.edu/academic-regs/university/course-info/)\n* [UG degree requirements](https://bulletin.vcu.edu/academic-regs/ugrad/ugrad-degree-reqs/)\n\n\nThe table is sorted in descending order by credit hours taught (*HRS sum*). The *HRS sum* is\nbroken down by type of course (e.g., LEC, LAB, etc.)\n\nValues are split 50/50 between the primary and secondary instructors if there is a secondary instructor.\n\n```{python}\n#| echo: false\ncols = ['LEC','LAB','SEM','RES','IND']\n\ninstructors = list(stacked_df[\n    (stacked_df['TERM'] == '202410')\n    & (stacked_df['DEPT'] == 'CMSC')\n][\"instructor\"].unique())\n\n\ndf = stacked_df[\n    (stacked_df['TERM'] == '202410')\n    & (stacked_df['instructor'].isin( instructors ))\n]\n\npivot_df = pd.pivot_table(df,index='instructor',values='sum_term_crse_crn_hours',columns='TYPE',aggfunc='sum' )\npivot_df = pivot_df[ cols ]\ndef format_no_decimal(val):\n    return f'{val:.0f}' if not pd.isna(val) else ''\n\n# Apply the lambda function to all columns\npivot_df = pivot_df.map(format_no_decimal)\n\nmeasures = {'sum_term_crse':'sum','sum_term_crse_crn':'sum','sum_term_crse_crn_students':'sum','sum_term_crse_crn_hours':'sum'}\ncourses_df = df.groupby('instructor').agg(measures).reset_index()\n\ncourses_df.columns = ['instructor','CRSE','CRN','STDNT','HRS']\n\npivot_df = pd.merge( courses_df,pivot_df,right_index=True,left_on='instructor',how='right')\npivot_df = pivot_df.set_index('instructor')\npivot_df = pivot_df.sort_values(by=['HRS'],ascending=False)\n\ncols =  ['CRSE sum','CRN sum','STDNT sum','HRS sum','LEC','LAB','SEM','RES','IND']\n\nMarkdown(tabulate(\n  pivot_df, \n  headers=cols,\n  numalign=\"right\",stralign=\"right\",\n  showindex=True\n))\n\n```\n\n## CMSC Teaching loads - last 2 terms\n\nThe table below shows credit hours by type of course for faculty in CMSC.\n\nThe data are aggregate of the past two terms (Spring 2023 and Fall 2023).\n\nThe table is sorted in descending order by credit hours taught (*HRS sum*). The *HRS sum* is\nbroken down by type of course (e.g., LEC, LAB, etc.)\n\nValues are split 50/50 between the primary and secondary instructors if there is a secondary instructor.\n\n```{python}\n#| echo: false\ncols = ['LEC','LAB','SEM','RES','IND']\n\ninstructors = list(stacked_df[\n    (stacked_df['TERM'] == '202410')\n    & (stacked_df['DEPT'] == 'CMSC')\n][\"instructor\"].unique())\n\n\ndf = stacked_df[\n    (stacked_df['TERM'].isin(['202320','202410']))\n    & (stacked_df['instructor'].isin(instructors))\n]\n\npivot_df = pd.pivot_table(df,index='instructor',values='sum_term_crse_crn_hours',columns='TYPE',aggfunc='sum' )\npivot_df = pivot_df[ cols ]\ndef format_no_decimal(val):\n    return f'{val:.0f}' if not pd.isna(val) else ''\n\n# Apply the lambda function to all columns\npivot_df = pivot_df.map(format_no_decimal)\n\nmeasures = {'sum_term_crse':'sum','sum_term_crse_crn':'sum','sum_term_crse_crn_students':'sum','sum_term_crse_crn_hours':'sum'}\ncourses_df = df.groupby('instructor').agg(measures).reset_index()\n\ncourses_df.columns = ['instructor','CRSE','CRN','STDNT','HRS']\n\npivot_df = pd.merge( courses_df,pivot_df,right_index=True,left_on='instructor',how='right')\npivot_df = pivot_df.set_index('instructor')\npivot_df = pivot_df.sort_values(by=['HRS'],ascending=False)\n\ncols =  ['CRSE sum','CRN sum','STDNT sum','HRS sum','LEC','LAB','SEM','RES','IND']\n\nMarkdown(tabulate(\n  pivot_df, \n  headers=cols,\n  numalign=\"right\",stralign=\"right\",\n  showindex=True\n))\n\n```\n","srcMarkdownNoYaml":"\n\nFor this analysis we'll be using the *stacked_df* data frame from the cleaning process.\n\n## Columns in the dataframe\n\n```{python}\n#| echo: false\nimport os\nimport pathlib\nimport matplotlib.pyplot as plt\nfrom IPython.display import Markdown\nfrom tabulate import tabulate\nimport pandas as pd\nimport numpy as np\n\nstacked_df = pd.read_csv('stacked_df.csv')\n\nfor col in ['TERM','COURSE','SECT']:\n  stacked_df[col] = stacked_df[col].astype(str)\n\nprint(stacked_df.columns)\n```\n\n## College-wide measures over time\n\nThis table presents a summary of courses (e.g., CMSC 255, CMSC 355, etc.), sections (or CRN), and student enrollments by semester in our data file.\n\n```{python}\n#| echo: false\nsummary_df = stacked_df.groupby(['TERM','period_name']).agg({'sum_term_crse':'sum','sum_term_crse_crn':'sum','sum_term_crse_crn_students':'sum','sum_term_crse_crn_hours':'sum'}).reset_index()\n\nMarkdown(tabulate(\n  summary_df, \n  headers=['Term','Term Name','Course Sum','CRN Sum','Student Sum','Hours Sum'],\n  numalign=\"right\",stralign=\"left\",\n  showindex=False,\n  floatfmt=\".0f\"  # Format numbers without decimals\n))\n\n```\n\n```{python}\n#| echo: false\n#| \nX_column = 'period_name'\nY_column = 'sum_term_crse_crn_students'\n\nplt.bar(summary_df[X_column], summary_df[Y_column])\n\nplt.xticks(rotation=45, ha='right')\n\nplt.xlabel('Semester')\nplt.ylabel('Sum of Section Enrollments')\nplt.title(\"Students taught by semester\")\n\nplt.show()\n\n```\n\n\n## Teaching for Fall 2023 by department\n\n```{python}\n#| echo: false\n\ndf = stacked_df[stacked_df['TERM'] == '202410']\n\nsummary_df = df.groupby(['DEPT']).agg({'sum_term_crse':'sum','sum_term_crse_crn':'sum','sum_term_crse_crn_students':'sum','sum_term_crse_crn_hours':'sum'}).reset_index()\n\nMarkdown(tabulate(\n  summary_df, \n  headers=['Dept','Course Sum','CRN Sum','Student Sum','Hours Sum'],\n  numalign=\"right\",stralign=\"left\",\n  showindex=False,\n  floatfmt=\".0f\"  # Format numbers without decimals\n))\n\n```\n\n\n```{python}\n#| echo: false\n#| \nX_column = 'DEPT'\nY_column = 'sum_term_crse_crn_students'\n\nplt.bar(summary_df[X_column], summary_df[Y_column])\n\nplt.xticks(rotation=45, ha='right')\n\nplt.xlabel('Department')\nplt.ylabel('Sum of Section Enrollments')\nplt.title(\"Students taught for Fall 2023\")\n\nplt.show()\n\n```\n\n## Fall 2023 CMSC Courses\n\n```{python}\n#| echo: false\n\nfactors = ['COURSE','CRN','TITLE','TYPE','instructor','MODALITY TEXT']\nmeasures = {'sum_term_crse':'sum','sum_term_crse_crn':'sum','sum_term_crse_crn_students':'sum','sum_term_crse_crn_hours':'sum'}\nmnames = ['CRSE sum','CRN sum','STDNTS sum','HRS sum']\n\ncols = [factor for factor in factors]+list(measures.keys())\ncnames = list(factors)+list(mnames)\ndf = stacked_df[\n    (stacked_df['TERM'] == '202410')\n    & (stacked_df['DEPT'] == 'CMSC')\n]\n\nsummary_df = df.groupby(factors).agg(measures).reset_index()\nsummary_df = summary_df.sort_values(by=factors, ascending=True)\n#summary_df = summary_df.sort_values(by='sum_term_crse_crn_students', ascending=False)\n\nMarkdown(tabulate(\n  summary_df, \n  headers=cnames,\n  numalign=\"right\",stralign=\"left\",\n  showindex=False\n))\n\n```\n\n## Fall 2023 CMSC Instructors\n\nThis table aggregates teaching by instructor and course. The table is sorted by instructor and course.\n\n\n```{python}\n#| echo: false\nfactors = ['COURSE','TITLE','TYPE','instructor']\nmeasures = {'sum_term_crse':'sum','sum_term_crse_crn':'sum','sum_term_crse_crn_students':'sum','sum_term_crse_crn_hours':'sum'}\nmnames = ['CRSE sum','CRN sum','STDNTS sum','HRS sum']\n\n# get list of instructors teaching CMSC courses\n\ninstructors = list(stacked_df[\n    (stacked_df['TERM'] == '202410')\n    & (stacked_df['DEPT'] == 'CMSC')\n][\"instructor\"].unique())\n\n# select all courses taught by instructors.  Some faculty teach ENGR courses!\n\ncols = [factor for factor in factors]+list(measures.keys())\ncnames = list(factors)+list(mnames)\ndf = stacked_df[\n    (stacked_df['TERM'] == '202410')\n    & (stacked_df['instructor'].isin(instructors))\n]\n\nsummary_df = df.groupby(factors).agg(measures).reset_index()\nsummary_df = summary_df.sort_values(by=['instructor','COURSE'], ascending=True)\n\nMarkdown(tabulate(\n  summary_df, \n  headers=cnames,\n  numalign=\"right\",stralign=\"left\",\n  showindex=False\n))\n\n```\n\n## Fall 2023 CMSC Teaching loads\n\nThe table below shows credit hours by type of course for faculty in CMSC. \n\n* [Credit hour definitions](https://bulletin.vcu.edu/academic-regs/university/course-info/)\n* [UG degree requirements](https://bulletin.vcu.edu/academic-regs/ugrad/ugrad-degree-reqs/)\n\n\nThe table is sorted in descending order by credit hours taught (*HRS sum*). The *HRS sum* is\nbroken down by type of course (e.g., LEC, LAB, etc.)\n\nValues are split 50/50 between the primary and secondary instructors if there is a secondary instructor.\n\n```{python}\n#| echo: false\ncols = ['LEC','LAB','SEM','RES','IND']\n\ninstructors = list(stacked_df[\n    (stacked_df['TERM'] == '202410')\n    & (stacked_df['DEPT'] == 'CMSC')\n][\"instructor\"].unique())\n\n\ndf = stacked_df[\n    (stacked_df['TERM'] == '202410')\n    & (stacked_df['instructor'].isin( instructors ))\n]\n\npivot_df = pd.pivot_table(df,index='instructor',values='sum_term_crse_crn_hours',columns='TYPE',aggfunc='sum' )\npivot_df = pivot_df[ cols ]\ndef format_no_decimal(val):\n    return f'{val:.0f}' if not pd.isna(val) else ''\n\n# Apply the lambda function to all columns\npivot_df = pivot_df.map(format_no_decimal)\n\nmeasures = {'sum_term_crse':'sum','sum_term_crse_crn':'sum','sum_term_crse_crn_students':'sum','sum_term_crse_crn_hours':'sum'}\ncourses_df = df.groupby('instructor').agg(measures).reset_index()\n\ncourses_df.columns = ['instructor','CRSE','CRN','STDNT','HRS']\n\npivot_df = pd.merge( courses_df,pivot_df,right_index=True,left_on='instructor',how='right')\npivot_df = pivot_df.set_index('instructor')\npivot_df = pivot_df.sort_values(by=['HRS'],ascending=False)\n\ncols =  ['CRSE sum','CRN sum','STDNT sum','HRS sum','LEC','LAB','SEM','RES','IND']\n\nMarkdown(tabulate(\n  pivot_df, \n  headers=cols,\n  numalign=\"right\",stralign=\"right\",\n  showindex=True\n))\n\n```\n\n## CMSC Teaching loads - last 2 terms\n\nThe table below shows credit hours by type of course for faculty in CMSC.\n\nThe data are aggregate of the past two terms (Spring 2023 and Fall 2023).\n\nThe table is sorted in descending order by credit hours taught (*HRS sum*). The *HRS sum* is\nbroken down by type of course (e.g., LEC, LAB, etc.)\n\nValues are split 50/50 between the primary and secondary instructors if there is a secondary instructor.\n\n```{python}\n#| echo: false\ncols = ['LEC','LAB','SEM','RES','IND']\n\ninstructors = list(stacked_df[\n    (stacked_df['TERM'] == '202410')\n    & (stacked_df['DEPT'] == 'CMSC')\n][\"instructor\"].unique())\n\n\ndf = stacked_df[\n    (stacked_df['TERM'].isin(['202320','202410']))\n    & (stacked_df['instructor'].isin(instructors))\n]\n\npivot_df = pd.pivot_table(df,index='instructor',values='sum_term_crse_crn_hours',columns='TYPE',aggfunc='sum' )\npivot_df = pivot_df[ cols ]\ndef format_no_decimal(val):\n    return f'{val:.0f}' if not pd.isna(val) else ''\n\n# Apply the lambda function to all columns\npivot_df = pivot_df.map(format_no_decimal)\n\nmeasures = {'sum_term_crse':'sum','sum_term_crse_crn':'sum','sum_term_crse_crn_students':'sum','sum_term_crse_crn_hours':'sum'}\ncourses_df = df.groupby('instructor').agg(measures).reset_index()\n\ncourses_df.columns = ['instructor','CRSE','CRN','STDNT','HRS']\n\npivot_df = pd.merge( courses_df,pivot_df,right_index=True,left_on='instructor',how='right')\npivot_df = pivot_df.set_index('instructor')\npivot_df = pivot_df.sort_values(by=['HRS'],ascending=False)\n\ncols =  ['CRSE sum','CRN sum','STDNT sum','HRS sum','LEC','LAB','SEM','RES','IND']\n\nMarkdown(tabulate(\n  pivot_df, \n  headers=cols,\n  numalign=\"right\",stralign=\"right\",\n  showindex=True\n))\n\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"explore.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"cosmo","title":"Exploring the data"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}