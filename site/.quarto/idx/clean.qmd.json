{"title":"Cleaning the data","markdown":{"yaml":{"title":"Cleaning the data"},"headingText":"Data sources","containsRefs":false,"markdown":"\n\nThis script describes the data and walks through a process of data cleaning.\n\nAt completion of this script all the individual semester data files will be combined into a single dataframe for analysis, and the dataframe will be refactored for cleaner analysis.\n\n\nThe files are named appropriately and stored in the *data* folder in this repository.\n\n```{python}\n#| echo: false\nimport os\nimport pathlib\nimport matplotlib.pyplot as plt\nfrom IPython.display import Markdown\nfrom tabulate import tabulate\nimport pandas as pd\nimport numpy as np\n\ndirectory_path = './data'\nfile_list = os.listdir(directory_path)\nxlsx_files = [file for file in file_list if file.endswith('.xlsx')]\nxlsx_df = pd.DataFrame({'file_name':xlsx_files})\n\nxlsx_df['term_code'] = xlsx_df['file_name'].str.split('-').str[2]\n\ndef convert_ay(term_code):\n    year = term_code[2:4]\n    return f'AY{int(year)-1}-{year}'\n\nxlsx_df['academic_year'] = xlsx_df['term_code'].apply(convert_ay)\n\nxlsx_df['period_code'] = xlsx_df['file_name'].str.split('-').str[3]\nxlsx_df['period_code'] = xlsx_df['period_code'].str.split('.').str[0]\n\ndef convert_period(period_code):\n    year = period_code[2:]\n    period_id = period_code[:2]\n    terms = {'FA': 'Fall', 'SP': 'Spring', 'SU': 'Summer'}\n    period_name = terms.get(period_id, 'Unknown')\n    return f'{period_name} {year}'\n\nxlsx_df['period_name'] = xlsx_df['period_code'].apply(convert_period)\n\nMarkdown(tabulate(\n  xlsx_df, \n  headers=['File name','Term Code','Acad Year','Period Code','Period Name'],\n  numalign=\"left\",stralign=\"left\",\n  showindex=False\n))\n\n```\n\n## Data Cleaning\n\nThe following sections combine the individual sources of data and clean them up.\n\n### Combining to single data frame\n\nThe following section combines each XLSX into a single data frame.  The contents of the files are variable in length depending on the number of sections taught\nduring any given semester.\n\nThe appropriate block starts one row after the row with the keyword *TERM* in the first column, denoting the header row.  The appropriate block ends with the row prior to the row with the keyword *N =*. \n\nWe're assuming that all xlsx workbooks share the same columns and names.\n\n```{python} \n#| echo: true\n#| \n# Initialize an empty list to store trimmed DataFrames\ntrimmed_dfs = []\n\n# Iterate through the list of XLSX file names\nfor file_name in xlsx_df['file_name']:\n    # Load the XLSX file into a DataFrame\n    full_path = os.path.join(directory_path, file_name)\n    df = pd.read_excel(full_path)\n    \n    # Find the row index where \"TERM\" is in the first column\n    term_index = df.index[df.iloc[:, 0] == \"TERM\"].tolist()[0]\n    \n    # Find the row index where \"N=\" is in the first column\n    n_index = df.index[df.iloc[:, 0].str.startswith(\"N =\").fillna(False)].tolist()[0]\n\n    # Clip the desired block and add column names\n    trimmed_df = df.loc[term_index + 1 : n_index - 1]\n    trimmed_df.columns = df.iloc[term_index].values\n\n    # Append the trimmed DataFrame to the list\n    trimmed_dfs.append(trimmed_df)\n\n# Combine the individual dataframes into one big one.\nsections_df = pd.concat(trimmed_dfs, ignore_index=True)\n```\n\n### Merge in the term and period data from the xlsx_df dataframe\n\nThe following code merges in the term and period data with the section data.\nFirst ensure that the key columns are strings, then merge away.\n\n```{python}\nsections_df['TERM'] = sections_df['TERM'].astype(str)\nxlsx_df['term_code'] = xlsx_df['term_code'].astype(str)\nsections_df = pd.merge(sections_df,xlsx_df,left_on='TERM', right_on='term_code', how='left')\n```\n\n### Fix known errors\n\nThe data in Banner doesn't always reflect reality.  This step corrects\nknown errors in the data.\n\nNote that the section data are stored one row per term-crn-meeting period.\n\n```{python}\n#| echo: false\n\n# Ensure that columns TERM and CRN are strings to help with lookup.\n\nsections_df['TERM'] = sections_df['TERM'].astype(str)\nsections_df['CRN'] = sections_df['CRN'].astype(str)\n\n# A helper function to correct data.\n\ndef fix( key, data):\n    for item in data.keys():\n        sections_df.loc[(sections_df[\"TERM\"]==key[\"TERM\"])&(sections_df[\"CRN\"]==key[\"CRN\"]),item]=data[item]\n\n```\n\n```{python}\n# Spring 2023: CMSC475 John Leonard taught for David Shepherd\nfix({'TERM':'202320','CRN':'43471'},{'PRIMARY INSTRUCTOR FIRST NAME':'John','PRIMARY INSTRUCTOR LAST NAME':'Leonard'})\n\n# Fall 2024: CMSC391 is cross listed with COAR463.\n# Total enrollment 34 across two instructors (Bennett and Leonard)\n# Currently Banner shows only 20 in the JL section and doesn't mention the COAR section.\nfix({'TERM':'202410','CRN':'46263'},{'ACTUAL ENROLLMENT':34})\n\n```\n\n\n### Reshape the data\n\nThe current dataframe *sections_df* contains one record per term-crn-meeting period tuple.  Within each tuple there can be up to 2 instructors.  We need to\nreshape the data with the instructors in a single column.\n\nWhile we're here we can combine instructor first and last name, and drop verbose columns.\n\n```{python}\ncols = sections_df.columns\nvalues_to_remove = ['PRIMARY INSTRUCTOR FIRST NAME','PRIMARY INSTRUCTOR LAST NAME','SECONDARY INSTRUCTOR FIRST NAME','SECONDARY INSTRUCTOR LAST NAME']\ncols = [x for x in cols if x not in values_to_remove]\n\nsections_df['ins1_last'] = sections_df['PRIMARY INSTRUCTOR LAST NAME']\nsections_df['ins1_first'] = sections_df['PRIMARY INSTRUCTOR FIRST NAME']\nsections_df['ins2_last'] = sections_df['SECONDARY INSTRUCTOR LAST NAME']\nsections_df['ins2_first'] = sections_df['SECONDARY INSTRUCTOR FIRST NAME']\nsections_df['instructor_1'] = sections_df['ins1_last']+','+sections_df['ins1_first']\nsections_df['instructor_2'] = sections_df['ins2_last']+','+sections_df['ins2_first']\nsections_df['instructor_1'].fillna('',inplace=True)\nsections_df['instructor_2'].fillna('',inplace=True)\n\nstacked_df = pd.melt(sections_df,\n    id_vars=cols,\n    value_vars=['instructor_1','instructor_2'],\n    var_name='instructor source',\n    value_name='instructor'\n)\n```\n\n### Clean up rows\n\n```{python}\n# remove rows with empty instructor 1.  Keep rows with empty instructor 1.\nstacked_df = stacked_df[ ~ ((stacked_df['instructor source']=='instructor_2') & (stacked_df['instructor']=='')) ]\n\n# drop rows with zero enrollments\nstacked_df = stacked_df[stacked_df['ACTUAL ENROLLMENT']>0]\n\n# Sort the data frame so it looks pretty in the output file.\nstacked_df = stacked_df.sort_values(['TERM','DEPT','COURSE','SECT','instructor source','instructor'])\n\n```\n\n### Compute appropriate aggregate measures\n\nThese measures are used in later calculations for numbers of courses, sections, instructors, etc.\n\n```{python}\n\n# Create various aggregate columns\nstacked_df['sum_term'] = 1.0 / stacked_df.groupby(['TERM'])['TERM'].transform('count')\nstacked_df['sum_term_crse'] = 1.0 / stacked_df.groupby(['TERM','COURSE'])['COURSE'].transform('count')\nstacked_df['sum_term_crse_crn'] = 1.0 / stacked_df.groupby(['TERM','COURSE','CRN'])['CRN'].transform('count')\nstacked_df['sum_term_crse_crn_students'] = stacked_df['ACTUAL ENROLLMENT'] * stacked_df['sum_term_crse_crn']\nstacked_df['sum_term_crse_crn_hours'] =  stacked_df['sum_term_crse_crn_students'] * stacked_df['MAX CREDITS']\n```\n\n\n### Store the data for later use\n\nWe're storing both the stacked and unstacked data.  Note that the\naggregate measures are stored with the stacked data only.\n\n```{python}\n# Store as CSV files\nsections_df.to_csv('sections_df.csv', index=False)\nstacked_df.to_csv('stacked_df.csv', index=False)\n```\n","srcMarkdownNoYaml":"\n\nThis script describes the data and walks through a process of data cleaning.\n\nAt completion of this script all the individual semester data files will be combined into a single dataframe for analysis, and the dataframe will be refactored for cleaner analysis.\n\n## Data sources\n\nThe files are named appropriately and stored in the *data* folder in this repository.\n\n```{python}\n#| echo: false\nimport os\nimport pathlib\nimport matplotlib.pyplot as plt\nfrom IPython.display import Markdown\nfrom tabulate import tabulate\nimport pandas as pd\nimport numpy as np\n\ndirectory_path = './data'\nfile_list = os.listdir(directory_path)\nxlsx_files = [file for file in file_list if file.endswith('.xlsx')]\nxlsx_df = pd.DataFrame({'file_name':xlsx_files})\n\nxlsx_df['term_code'] = xlsx_df['file_name'].str.split('-').str[2]\n\ndef convert_ay(term_code):\n    year = term_code[2:4]\n    return f'AY{int(year)-1}-{year}'\n\nxlsx_df['academic_year'] = xlsx_df['term_code'].apply(convert_ay)\n\nxlsx_df['period_code'] = xlsx_df['file_name'].str.split('-').str[3]\nxlsx_df['period_code'] = xlsx_df['period_code'].str.split('.').str[0]\n\ndef convert_period(period_code):\n    year = period_code[2:]\n    period_id = period_code[:2]\n    terms = {'FA': 'Fall', 'SP': 'Spring', 'SU': 'Summer'}\n    period_name = terms.get(period_id, 'Unknown')\n    return f'{period_name} {year}'\n\nxlsx_df['period_name'] = xlsx_df['period_code'].apply(convert_period)\n\nMarkdown(tabulate(\n  xlsx_df, \n  headers=['File name','Term Code','Acad Year','Period Code','Period Name'],\n  numalign=\"left\",stralign=\"left\",\n  showindex=False\n))\n\n```\n\n## Data Cleaning\n\nThe following sections combine the individual sources of data and clean them up.\n\n### Combining to single data frame\n\nThe following section combines each XLSX into a single data frame.  The contents of the files are variable in length depending on the number of sections taught\nduring any given semester.\n\nThe appropriate block starts one row after the row with the keyword *TERM* in the first column, denoting the header row.  The appropriate block ends with the row prior to the row with the keyword *N =*. \n\nWe're assuming that all xlsx workbooks share the same columns and names.\n\n```{python} \n#| echo: true\n#| \n# Initialize an empty list to store trimmed DataFrames\ntrimmed_dfs = []\n\n# Iterate through the list of XLSX file names\nfor file_name in xlsx_df['file_name']:\n    # Load the XLSX file into a DataFrame\n    full_path = os.path.join(directory_path, file_name)\n    df = pd.read_excel(full_path)\n    \n    # Find the row index where \"TERM\" is in the first column\n    term_index = df.index[df.iloc[:, 0] == \"TERM\"].tolist()[0]\n    \n    # Find the row index where \"N=\" is in the first column\n    n_index = df.index[df.iloc[:, 0].str.startswith(\"N =\").fillna(False)].tolist()[0]\n\n    # Clip the desired block and add column names\n    trimmed_df = df.loc[term_index + 1 : n_index - 1]\n    trimmed_df.columns = df.iloc[term_index].values\n\n    # Append the trimmed DataFrame to the list\n    trimmed_dfs.append(trimmed_df)\n\n# Combine the individual dataframes into one big one.\nsections_df = pd.concat(trimmed_dfs, ignore_index=True)\n```\n\n### Merge in the term and period data from the xlsx_df dataframe\n\nThe following code merges in the term and period data with the section data.\nFirst ensure that the key columns are strings, then merge away.\n\n```{python}\nsections_df['TERM'] = sections_df['TERM'].astype(str)\nxlsx_df['term_code'] = xlsx_df['term_code'].astype(str)\nsections_df = pd.merge(sections_df,xlsx_df,left_on='TERM', right_on='term_code', how='left')\n```\n\n### Fix known errors\n\nThe data in Banner doesn't always reflect reality.  This step corrects\nknown errors in the data.\n\nNote that the section data are stored one row per term-crn-meeting period.\n\n```{python}\n#| echo: false\n\n# Ensure that columns TERM and CRN are strings to help with lookup.\n\nsections_df['TERM'] = sections_df['TERM'].astype(str)\nsections_df['CRN'] = sections_df['CRN'].astype(str)\n\n# A helper function to correct data.\n\ndef fix( key, data):\n    for item in data.keys():\n        sections_df.loc[(sections_df[\"TERM\"]==key[\"TERM\"])&(sections_df[\"CRN\"]==key[\"CRN\"]),item]=data[item]\n\n```\n\n```{python}\n# Spring 2023: CMSC475 John Leonard taught for David Shepherd\nfix({'TERM':'202320','CRN':'43471'},{'PRIMARY INSTRUCTOR FIRST NAME':'John','PRIMARY INSTRUCTOR LAST NAME':'Leonard'})\n\n# Fall 2024: CMSC391 is cross listed with COAR463.\n# Total enrollment 34 across two instructors (Bennett and Leonard)\n# Currently Banner shows only 20 in the JL section and doesn't mention the COAR section.\nfix({'TERM':'202410','CRN':'46263'},{'ACTUAL ENROLLMENT':34})\n\n```\n\n\n### Reshape the data\n\nThe current dataframe *sections_df* contains one record per term-crn-meeting period tuple.  Within each tuple there can be up to 2 instructors.  We need to\nreshape the data with the instructors in a single column.\n\nWhile we're here we can combine instructor first and last name, and drop verbose columns.\n\n```{python}\ncols = sections_df.columns\nvalues_to_remove = ['PRIMARY INSTRUCTOR FIRST NAME','PRIMARY INSTRUCTOR LAST NAME','SECONDARY INSTRUCTOR FIRST NAME','SECONDARY INSTRUCTOR LAST NAME']\ncols = [x for x in cols if x not in values_to_remove]\n\nsections_df['ins1_last'] = sections_df['PRIMARY INSTRUCTOR LAST NAME']\nsections_df['ins1_first'] = sections_df['PRIMARY INSTRUCTOR FIRST NAME']\nsections_df['ins2_last'] = sections_df['SECONDARY INSTRUCTOR LAST NAME']\nsections_df['ins2_first'] = sections_df['SECONDARY INSTRUCTOR FIRST NAME']\nsections_df['instructor_1'] = sections_df['ins1_last']+','+sections_df['ins1_first']\nsections_df['instructor_2'] = sections_df['ins2_last']+','+sections_df['ins2_first']\nsections_df['instructor_1'].fillna('',inplace=True)\nsections_df['instructor_2'].fillna('',inplace=True)\n\nstacked_df = pd.melt(sections_df,\n    id_vars=cols,\n    value_vars=['instructor_1','instructor_2'],\n    var_name='instructor source',\n    value_name='instructor'\n)\n```\n\n### Clean up rows\n\n```{python}\n# remove rows with empty instructor 1.  Keep rows with empty instructor 1.\nstacked_df = stacked_df[ ~ ((stacked_df['instructor source']=='instructor_2') & (stacked_df['instructor']=='')) ]\n\n# drop rows with zero enrollments\nstacked_df = stacked_df[stacked_df['ACTUAL ENROLLMENT']>0]\n\n# Sort the data frame so it looks pretty in the output file.\nstacked_df = stacked_df.sort_values(['TERM','DEPT','COURSE','SECT','instructor source','instructor'])\n\n```\n\n### Compute appropriate aggregate measures\n\nThese measures are used in later calculations for numbers of courses, sections, instructors, etc.\n\n```{python}\n\n# Create various aggregate columns\nstacked_df['sum_term'] = 1.0 / stacked_df.groupby(['TERM'])['TERM'].transform('count')\nstacked_df['sum_term_crse'] = 1.0 / stacked_df.groupby(['TERM','COURSE'])['COURSE'].transform('count')\nstacked_df['sum_term_crse_crn'] = 1.0 / stacked_df.groupby(['TERM','COURSE','CRN'])['CRN'].transform('count')\nstacked_df['sum_term_crse_crn_students'] = stacked_df['ACTUAL ENROLLMENT'] * stacked_df['sum_term_crse_crn']\nstacked_df['sum_term_crse_crn_hours'] =  stacked_df['sum_term_crse_crn_students'] * stacked_df['MAX CREDITS']\n```\n\n\n### Store the data for later use\n\nWe're storing both the stacked and unstacked data.  Note that the\naggregate measures are stored with the stacked data only.\n\n```{python}\n# Store as CSV files\nsections_df.to_csv('sections_df.csv', index=False)\nstacked_df.to_csv('stacked_df.csv', index=False)\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"clean.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"cosmo","title":"Cleaning the data"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}