---
title: Instructor workloads
author:
    - name: John Leonard
      email: jdleonard@vcu.edu
date: last-modified
---

The tables below highlight faculty teaching workloads for a two most recent semesters, Spring 2024 and Fall 2024.

The tab `Header descriptions` for an explanation of the visualizations. The tab `model` describe the workload model itself. Other models can be proposed and then applied across all the faculty. The tab `All` combines faculty across all departments.  Departmental tabs group faculty by department.

```{python}
#| echo: false
import os
import pathlib
import matplotlib.pyplot as plt
from IPython.display import Markdown
from tabulate import tabulate
import pandas as pd
import numpy as np

from matplotlib import colormaps

import panel as pn
from bokeh.models.widgets.tables import NumberFormatter, StringFormatter
pn.extension('tabulator')

TERMS = ['202420','202510']

```

```{python}
#| echo: false
# Load the CSV file into a pandas data frame.

stacked_df = pd.read_csv('stacked_df.csv')

# Ensure that these 3 columns are treated as strings and not as numbers.
for col in ['TERM','COURSE','SECT']:
  stacked_df[col] = stacked_df[col].astype(str)

```

```{python}
#| echo: false

def generate_hour_bar_html(row, dataframe):
    value1 = row['sum_term_crse_crn_hours_lec']
    value2 = row['sum_term_crse_crn_hours'] - value1
    max_val = dataframe[['sum_term_crse_crn_hours']].sum(axis=1).max()
    width1 = 100 * (value1 / max_val)
    width2 = 100 * (value2 / max_val)
    
    median_hours = dataframe['sum_term_crse_crn_hours'].median()
    median_value = 100 * (median_hours / max_val)

    # Generate a colormap
    cmap = colormaps['Blues']
    color1 = cmap(0.4)  # Adjust the value (between 0 and 1) for the first color (lighter)
    color2 = cmap(0.6)  # Adjust the value (between 0 and 1) for the second color (darker)

    # Convert RGBA to CSS-ready format
    color1_css = f'rgba({int(color1[0]*255)}, {int(color1[1]*255)}, {int(color1[2]*255)}, {color1[3]})'
    color2_css = f'rgba({int(color2[0]*255)}, {int(color2[1]*255)}, {int(color2[2]*255)}, {color2[3]})'

    html_content = f"""
    <div style="width: 100%; display: flex; height: 100%; align-items: center;">
        <div style="width: {width1}%; background-color: {color2_css}; height: 100%;"></div>
        <div style="width: {width2}%; background-color: {color1_css}; height: 100%;"></div>
        <div style="position: absolute; left: {median_value}%; top: 0; bottom: 0; width: 1px; background-color: black;"></div>
    </div>
    """
    return html_content

def generate_workload_bar_html(row, dataframe):
    value1 = row['sum_term_crse_wrkld_sample_lec']
    value2 = row['sum_term_crse_wrkld_sample'] - value1
    max_val = dataframe[['sum_term_crse_wrkld_sample']].sum(axis=1).max()
    width1 = 100 * (value1 / max_val)
    width2 = 100 * (value2 / max_val)

    median = dataframe['sum_term_crse_wrkld_sample'].median()
    median_value = 100 * (median / max_val)

    # Calculate the unused space (if any) to keep bars aligned to the right
    remaining_space = 100 - (width1 + width2)

    # Generate a colormap
    cmap = colormaps['Greens']
    color1 = cmap(0.4)  # Adjust the value (between 0 and 1) for the first color (lighter)
    color2 = cmap(0.6)  # Adjust the value (between 0 and 1) for the second color (darker)

    # Convert RGBA to CSS-ready format
    color1_css = f'rgba({int(color1[0]*255)}, {int(color1[1]*255)}, {int(color1[2]*255)}, {color1[3]})'
    color2_css = f'rgba({int(color2[0]*255)}, {int(color2[1]*255)}, {int(color2[2]*255)}, {color2[3]})'

    html_content = f"""
    <div style="width: 100%; display: flex; height: 100%; align-items: center; justify-content: flex-end;">
        <div style="width: 100%; display: flex; height: 100%; align-items: center">
            <div style="width: {remaining_space}%; height: 100%;"></div>
            <div style="width: {width2}%; background-color: {color1_css}; height: 100%;"></div>
            <div style="width: {width1}%; background-color: {color2_css}; height: 100%;"></div>
           <div style="position: absolute; left: {100-median_value}%; top: 0; bottom: 0; width: 1px; background-color: black;"></div>
        </div>
    </div>
    """
    return html_content


def get_tabulator_table(stacked_df, terms=TERMS, dept=['CMSC'], filters=None ):
    """ load data """
    df = stacked_df[(stacked_df['TERM'].isin(terms)) & (stacked_df['ins_dept'].isin(dept))]
    df = df.sort_values(by=["instructor_name", "term_code"], ascending=[True, True])

    if filters is None:
        filters = {
    'Role':{'type':'list','func':'in', 'valuesLookup': True, 'sort': 'asc', 'multiselect': True }
}


    summary_df = df.groupby(['instructor_name','ins_dept','ins_role']).agg({
    'sum_term_crse':'sum',
    'sum_term_crse_crn':'sum',
    'sum_term_crse_crn_mtg_students':'sum',
    'sum_term_crse_crn_hours':'sum',
    'sum_term_crse_crn_hours_lec':'sum',
    'sum_term_crse_wrkld_sample':'sum',
    'sum_term_crse_wrkld_sample_lec':'sum'
    }).reset_index()

    summary_df = summary_df[[
        'instructor_name','ins_dept','ins_role',
        'sum_term_crse_wrkld_sample',
        'sum_term_crse_wrkld_sample_lec',
        'sum_term_crse_crn_hours_lec',
        'sum_term_crse_crn_hours'
    ]]

    summary_df['Wrkld Bar'] = summary_df.apply(generate_workload_bar_html, dataframe=summary_df, axis=1)
    summary_df['Hour Bar'] = summary_df.apply(generate_hour_bar_html, dataframe=summary_df, axis=1)

    summary_df = summary_df.rename(columns={
        'TERM': 'Term',
        'instructor_name':'Instructor',
        'ins_dept':'Dept',
        'ins_role': 'Role',
        'sum_term_crse': 'Crse',
        'sum_term_crse_crn': 'CRNs',
        'sum_term_crse_crn_mtg_students': 'Stdnts',
        'sum_term_crse_crn_hours': 'Hours',
        'sum_term_crse_wrkld_sample':'Wrkld',
        'sum_term_crse_wrkld_sample_lec': 'W.Lec',
        'sum_term_crse_crn_hours_lec': 'Hr.Lec'
    })


    def content_fn( row ):
        ins_df = stacked_df[(stacked_df['TERM'].isin(terms)) & (stacked_df['instructor_name']==row["Instructor"])]
        ins_df = ins_df.groupby(['period_name','CRN','COURSE','TITLE','wrkld_sample_type','wrkld_sample_note']).agg(
            {
            'sum_term_crse_crn':'sum',
            'sum_term_crse_crn_mtg_students':'sum',
            'sum_term_crse_crn_hours':'sum',
            'sum_term_crse_crn_hours_lec' : 'sum',
            'sum_term_crse_wrkld_sample':'sum',
            'sum_term_crse_wrkld_sample_lec':'sum'}).reset_index()
        
        ins_df = ins_df[ ['period_name','CRN','COURSE','TITLE',
        'wrkld_sample_type',
        'sum_term_crse_wrkld_sample',
        'sum_term_crse_wrkld_sample_lec',
        'sum_term_crse_crn_hours',
        'sum_term_crse_crn_hours_lec',
        'sum_term_crse_crn_mtg_students',
        'wrkld_sample_note'] ]
        
        ins_df = ins_df.rename(columns={
            'period_name' : 'Term',
            'COURSE' : 'Crse',
            'TITLE' : 'Crse Title',
            'wrkld_sample_type' : 'W.Type',
            'wrkld_sample_note' : 'Wrkld note',
            'sum_term_crse': 'Crse',
            'sum_term_crse_crn': 'CRNs',
            'sum_term_crse_crn_mtg_students': 'Stdnts',
            'sum_term_crse_crn_hours': 'Hours',
            'sum_term_crse_crn_hours_lec': 'Hr.Lec',
            'sum_term_crse_wrkld_sample':'W.Tot',
            'sum_term_crse_wrkld_sample_lec': 'W.Lec'
        })
        df2 = pn.widgets.Tabulator(ins_df,show_index=False,
            sorters=[
            {'field':'W.Type','dir': 'desc'},
            {'field':'CRN','dir': 'asc'},
            {'field':'Crse','dir': 'asc'},
            {'field':'Term','dir': 'asc'},
            ],
            formatters={
            'CRN': StringFormatter( text_align='center'),
            'W.Type': StringFormatter( text_align='center'),
            'CRNs': NumberFormatter( format="0.0",text_align='center'),
            'Stdnts': NumberFormatter( format="0.0",text_align='center'),
            'Hours': NumberFormatter( format="0.0",text_align='center'),
            'Hr.Lec': NumberFormatter( format="0.0",text_align='center'),
            'W.Tot': NumberFormatter( format="0.00",text_align='center'),
            'W.Lec': NumberFormatter( format="0.00",text_align='center')
            },
        )
        return pn.Row( df2 )


    df_widget = pn.widgets.Tabulator(
        summary_df,
        show_index = False,
        sorters=[
            {'field':'Wrkld','dir': 'desc'},
            {'field':'Hours','dir': 'desc'},
        ],
        widths={'Hour Bar':'20px','Wrkld Bar':'15px'},
        titles={'Hour Bar':'Lecture/total hours','Wrkld Bar':'Total/Lecture wrkld'},
        sortable={'Hour Bar':False,'Wrkld Bar':False},
        header_filters=filters,
        formatters={
            'Crse': NumberFormatter( format="0.0",text_align='center'),
            'CRNs': NumberFormatter( format="0.0",text_align='center'),
            'Stdnts': NumberFormatter( format="0.0",text_align='center'),
            'Hours': NumberFormatter( format="0.0",text_align='center'),
            'Hr.Lec': NumberFormatter( format="0.0",text_align='center'),
            'Wrkld': NumberFormatter( format="0.00",text_align='center'),
            'W.Lec': NumberFormatter( format="0.00",text_align='center'),
            'Wrkld Bar': {'type':'html'},
            'Hour Bar': {'type':'html'}
        },
        row_content=content_fn,
        embed_content=True,
        expanded = [],
        selection = []
    )

    df_widget.disabled = True

    panel = pn.Row(df_widget)
    df_widget.expanded = []

    return panel
```
::: {.column-screen-inset-right}

::: {.panel-tabset}

## All
```{python}
#| echo: false

filters = {
    'Instructor': {'type': 'input', 'func': 'like', 'placeholder': 'Enter name'},
    'Dept':{'type':'list','func':'in', 'valuesLookup': True, 'sort': 'asc', 'multiselect': True },
    'Role':{'type':'list','func':'in', 'valuesLookup': True, 'sort': 'asc', 'multiselect': True }
}
get_tabulator_table( stacked_df,TERMS,['EGRM','EGRE','EGRC','EGRB','CMSC'],filters=filters)
```

## CMSC
```{python}
#| echo: false
get_tabulator_table( stacked_df,TERMS,['CMSC'])
```

## MNE
```{python}
#| echo: false
get_tabulator_table( stacked_df,TERMS,['EGRM'])
```

## ECE
```{python}
#| echo: false
get_tabulator_table( stacked_df,TERMS,['EGRE'])
```

## BME
```{python}
#| echo: false
get_tabulator_table( stacked_df,TERMS,['EGRB'])
```

## CLSE
```{python}
#| echo: false
get_tabulator_table( stacked_df,TERMS,['EGRC'])
```

## Model

Below is the workload model used for this analysis. These rules are applied to each CRN and faculty member for the respective terms. 

```{python}
model_sample = {
    'base_lecture_value':1.0,
    'labs_per_lecture':3.0,
    'vips_per_lecture':3.0,
    'capstones_per_lecture': 3.0,
    'students_per_capstone': 4.0,
    'seminars_per_lecture': 1.0,
    'res_ind_fld_per_lecture': 0.0,
    'large_classes': [ [80,1.5],[160,2.0],[240,2.5] ]
}
```

1. Each section (or CRN/course reference number) is assigned base of 1.0 workload units.
1. Lab sections including actual course labs, capstone/senior design, and VIP receive 1/3 credit.  This is consistent with the model that 3 lab hours is equivalent to 1 teaching hour. (e.g., 3-3-4 courses.)
Many departments in EGR code lab sections as lecture sections, making it
difficult to discern. We can identify lab sections by class meetings - if a CRN has multiple
class meetings, one meeting multiple times per week and another meeting only once per week, the
lab is denoted as the once-per-week meeting. See [this section](./20_clean.qmd#distinguish-lab-workloads) for more details.
1. Seminar sections get full section credit as a positive incentive. There is a limited number of SEM courses, they are important to the curriculum, and we want them covered.
1. Capstone designs are scaled to give one LAB (0.33 per above) unit per groups of 4 students.
1. Research, indepedent study and coop/intern sections receive zero teaching credit in this workload model. Research active faculty receive reduced teaching loads, rather than credit for these units.

Significant effort was also invested in the [corresponding google workbook](https://docs.google.com/spreadsheets/d/1ZK7k8M85CXLof6FdeJYJuGFbfjsOXrCv5mc7OgUInWw/edit#gid=1484314377).

## Header descriptions

The tables in the tabs show the workload model applied to each department for the period shown above.  Relative
workloads are also visualized.  Four major metrics are highlighted:

1. Total workload (`Wrkld`), the cumulative workload for lectures, labs, seminar, capstones and VIP, with one `workload unit` equivelent to one standard lecture course per semester.
1. Lecture workload (`W.Lec`), the cumulative workload associated with lecture classes.  This most closely corresponds to the traditional workload conversation (e.g., 1+1 would show as 2, 2+1 or 1+2 would show as 3, etc.)
1. Lecture hours (`Hr.Lec`) the cumulative credit hours (number of students enrolled * course credit) for just lecture sections,
1. Total Hours (`Hours`), the cumulative credit hours for all sections.  This value drives the VCU budget model, as a portion of each unit's budget is estimated on a per-credit hour basis for the academic year.

The visualization shows two horizontal, stacked bars, centered around an axis, showing
workload extending to the left and credit hours extending to the right.  Bars represent lecture-only and non-lecture units so that the total bar length represents the total, either workload units or credit hours.

Columns can be sorted by clicking the header triangle icons.  Holding `shift` while clicking permits sorting over multiple columns.

The median (50th percentile across instructors) for total workload and total hours is also shown.

Individual faculty rows can be expanded to explore the details of each computation.  The detail table shows each CRN, workload assignments, and the rule applied to derive the value.

Note because of a limitation in way that these data are accessed, these tables only include courses taught under the College of Engineering.  For example, if a engineering faculty member coteaches a section OUTSIDE of engineering, the units associated with the non-engineering sections are not included in the analysis. This limitation can be removed, talk with me and I can tell you how.

## Hey, my data are wrong!

You can click on the triangle next to your name to see the courses that were aggregated to produce your line in the plot.

As noted, these data need [cleaning](20_clean.qmd):

* What was originally coded in Banner doesn't necessarily reflect what happened in the classroom.

* Departments code courses differently and adjustments are required to permit consistent measurement across the college as a whole.

* Courses may be misclassified as LEC, LAB, etc.  Adjustments can be made in my code as necessary.

If you believe that your data are wrong, send me an email!  [John Leonard](mailto:jdleonard@vcu.edu) describing the situation.

I'll implement the [fixes in the code](20_clean.qmd#fix-known-errors) and regenerate the reports with improved data.

This is iterative process. The more eyes that look at these data the better - and the cleaner they will become!

:::
:::

